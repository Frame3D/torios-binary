# data file for the Fltk User Interface Designer (fluid)
version 1.0304
i18n_type 1
i18n_include <libintl.h>
i18n_function gettext
header_name {.h}
code_name {.cxx}
decl {\#include "../include/toolbar_icons.h"} {public global
}

decl {\#include <string>} {public global
}

decl {\#include <iostream>} {public global
}

decl {\#include <vector>} {public global
}

class UI {open
} {
  decl {std::string MSG;} {public local
  }
  Function {make_window()} {open
  } {
    Fl_Window passwin {
      label {Enter Password} open
      xywh {851 229 265 120} type Double xclass flaskpass visible
    } {
      Fl_Input password {
        label Password
        callback {Fl::focus(ok);
std::cout<<password->value()<<std::endl;
exit(0);} selected
        xywh {45 30 200 35} type Secret box FLAT_BOX align 257 when 8
      }
      Fl_Button ok {
        label Ok
        callback {std::cout<<password->value()<<std::endl;
exit(0);}
        xywh {175 75 75 30} box FLAT_BOX color 61 selection_color 67 labelcolor 7
      }
      Fl_Button {} {
        label Cancel
        callback {std::cout<<std::endl;
exit(1);}
        xywh {85 75 80 30} box FLAT_BOX color 80 selection_color 72 labelcolor 7
      }
      Fl_Box {} {
        xywh {5 30 32 32}
        code0 {o->image(lock_image);}
      }
    }
  }
  Function {combine(std::vector<std::string> in)} {open return_type {std::string}
  } {
    code {std::string out;
bool empty = false;
if (in.empty())
  empty = true;
else
{
  bool notEmpty=false;
  for( std::vector<std::string>::iterator it = in.begin();
    it!=in.end();
    ++it)
  {
   std::string TMP =*it;
    if( (TMP.compare("")!=0) && (TMP.compare(" ")!=0) )
      notEmpty=true;
  }
  if(!notEmpty)
    empty=true;
}
if(empty)
{
  out="Password";
}
else
{
  for( std::vector<std::string>::iterator it = in.begin();
    it!=in.end();
    ++it)
  {
    out+=*it;
    out+=" ";
  }
}
return out;} {}
  }
  Function {set_text()} {open
  } {
    code {passwin->label(MSG.c_str());
password->label(MSG.c_str());
password->redraw();
passwin->redraw();} {}
  }
}

Function {main(int argc, char*argv[])} {open return_type int
} {
  code {std::string current_exec_name = argv[0];
std::string first_arge;
std::vector<std::string> all_args;
if (argc > 1)
{
  first_arge = argv[1];
  for(int i = 1; i!=argc; i++)
  {
    all_args.push_back(argv[i]);
  }
}
UI *ui = new UI();
ui->MSG=ui->combine(all_args);
ui->make_window()->show();
ui->set_text();
return Fl::run();} {}
}
