# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cxx}
decl {\#include "../include/toolbar_icons.h"} {public global
} 

decl {\#include <X11/Xlib.h>} {public global
} 

decl {\#include <FL/filename.H>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <FL/Fl_JPEG_Image.H>
\#include <FL/Fl_PNG_Image.H>
\#include <FL/Fl_XBM_Image.H>
\#include <FL/Fl_XPM_Image.H>
\#include <FL/Fl_GIF_Image.H>} {public global
} 

decl {\#include <stdexcept>
\#include <string>
\#include <iostream>
\#include <fstream>
\#include <vector>
\#include <sys/stat.h>
\#include <sys/types.h>
\#include <fcntl.h>
\#include <sys/sendfile.h>  // sendfile
\#include <algorithm>
\#include <float.h>
\#include <sstream>
\#include <float.h>
\#include <dirent.h>
\#include <sys/stat.h>
\#include <langinfo.h>
\#include <stdlib.h>
\#include <stdio.h>
\#include <cstdlib>
\#include <fstream>
\#include <sstream>
\#include <errno.h>
\#include <locale.h>
\#include <unistd.h>
\#include <signal.h>} {public global
} 

decl {\#define NANOSVG_ALL_COLOR_KEYWORDS
\#define NANOSVG_IMPLEMENTATION
\#include "../include/nanosvg.h"
\#define NANOSVGRAST_IMPLEMENTATION
\#include "../include/nanosvgrast.h"} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <vector>} {public global
} 

class ImageBox {open : {public Fl_Box}
} {
  Function {handle(int e)} {open return_type int
  } {
    code {static int offset[2] = { 0, 0 };
int ret = Fl_Box::handle(e);
switch ( e )
{
  case FL_PUSH:
    offset[0] = x() - Fl::event_x();    // save where user clicked for dragging
    offset[1] = y() - Fl::event_y();
    return(1);
  case FL_RELEASE:
    return(1);
  case FL_DRAG:
    position(offset[0]+Fl::event_x(), offset[1]+Fl::event_y());
    this->parent()->parent()->redraw();
    return(1);
  case FL_MOUSEWHEEL:
    UserInterface *ui = (UserInterface*)this->parent()->parent()->user_data();
    if(Fl::event_dy( )>0)
    {
      //DOWN aka zoom out
      ui->zoom(true);
    }
    else if (Fl::event_dy( )<0)
    {
      ui->zoom();
    }
    
}
return(ret);} {}
  }
  Function {ImageBox(Fl_Boxtype b=FL_FLAT_BOX, int X=0, int Y=55, int W=385, int H=320, const char *l=NULL):Fl_Box(b,X,Y,W,H,l)} {} {
    code {box(FL_FLAT_BOX);
color(FL_DARK3);} {}
  }
} 

class UserInterface {open
} {
  decl {ImageBox *viewer;} {protected local
  }
  decl {std::string CURRENT_DIR;} {protected local
  }
  decl {std::string CURRENT_FILE;} {protected local
  }
  Function {UserInterface()} {} {
    code {} {}
  }
  Function {about_window()} {} {
    Fl_Window about_win {
      label About open
      xywh {786 332 388 200} type Double hide resizable
    } {
      Fl_Button {} {
        label Close
        callback {about_win->hide();}
        xywh {320 170 65 30} box FLAT_BOX color 80 selection_color 72 labelcolor 7
      }
      Fl_Box {} {
        xywh {4 4 380 160} box FLAT_BOX color 7 align 64 resizable
        code0 {about_text(o);}
      }
    }
  }
  Function {about_text(Fl_Widget* o)} {} {
    code {std::string t="Libre Software Developed for ToriOS\\n Copyright 2018 GPL3\\nA simple FLTK image viewer";
display_text(t,o);} {}
  }
  Function {button_style(int style=0)} {} {
    code {if(style==0)
{
open_button->image(open_image);
//save_button->image(save_image);
//new_button->image(new_image);
//undo_button->image(undo_image);
zoom_in_button->image(zoom_in);
zoom_out_button->image(zoom_out);
//replace_button->image(replace_image);
//cp_button->image(copy_image);
//p_button->image(paste_image);
//cut_button->image(cut_image);
}
else
{
open_button->image(color_open_image);
//save_button->image(color_save_image);
//new_button->image(color_new_image);
//undo_button->image(color_undo_image);
zoom_in_button->image(color_zoom_in);
zoom_out_button->image(color_zoom_out);
//replace_button->image(color_replace_image);
//cp_button->image(color_copy_image);
//p_button->image(color_paste_image);
//cut_button->image(color_cut_image);
}

open_button->redraw();
//save_button->redraw();
//new_button->redraw();
//undo_button->redraw();
zoom_in_button->redraw();
zoom_out_button->redraw();
//replace_button->redraw();
//cp_button->redraw();
//p_button->redraw();
//cut_button->redraw();} {}
  }
  Function {changeWidgetImage(std::string icon_file, Fl_Widget * widget)} {open return_type void
  } {
    code {if(icon_file.compare("")==0)
{
  trace("changeWidgetImage::Image file is empty");
  return;
}
widget->align(FL_ALIGN_CENTER);
widget->copy_label("");
widget->image(NULL);
widget->redraw();
widget->label(0L);
if(!test_file(icon_file))
{
  trace("changeWidgetImage:: "+icon_file+" is not an Image");
  return;
}
if(icon_file.compare("")==0)
{
  trace("changeWidgetImage::Image file is empty");
  return;
}

Fl_Image* image2=widget->image();//new Fl_Image(w,h,4);

if(has_file_extention_at_end(icon_file,".png"))
{
  Fl_Image* image = new Fl_PNG_Image(icon_file.c_str());
  image2 = image->copy();
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".xpm"))
{
  Fl_Image* image = new Fl_XPM_Image(icon_file.c_str());
  image2 = image->copy();
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".xbm"))
{
  Fl_Image* image = new Fl_XBM_Image(icon_file.c_str());
  image2 = image->copy();
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".svg"))
{
  NSVGimage *svg_image = NULL;
  NSVGrasterizer *rast = NULL;
  unsigned char* img_data = NULL;
  int width;
  int height;
  const int depth = 4;
  svg_image = nsvgParseFromFile(icon_file.c_str(), "px", 96);
  if (svg_image == NULL)
  {
    trace("changeWidgetImage::Could not open SVG image:"+icon_file);
    return;
  }
  width = (int)svg_image->width;
  height = (int)svg_image->height;
  rast = nsvgCreateRasterizer();
  if (rast == NULL)
  {
    trace("changeWidgetImage::Could not init rasterizer.");
    return;
  }
  img_data = (unsigned char*)malloc(width * height * depth);
  if (img_data == NULL)
  {
    trace("changeWidgetImage::Could not alloc image buffer.\\n");
    return;
  }
  nsvgRasterize(rast, svg_image, 0, 0, 1, img_data, width, height, (width * depth));
  Fl_Image* image  = new Fl_RGB_Image(img_data, width, height, 4);
  image2 = image->copy();
  delete(image);
  nsvgDeleteRasterizer(rast);
  nsvgDelete(svg_image);
}
else if((has_file_extention_at_end(icon_file,".jpg"))||
(has_file_extention_at_end(icon_file,".jpeg"))||
(has_file_extention_at_end(icon_file,".face")))
{
  Fl_Image* image = new Fl_JPEG_Image(icon_file.c_str());
  image2 = image->copy();
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".gif"))
{
  Fl_Image* image = new Fl_GIF_Image(icon_file.c_str());
  image2 = image->copy();
  delete(image);
}
else{return;}
widget->show();
//double A = (image2->h()*image2->w());
//double newW = sqrt(A*(win->w()/win->h()));
//double newH = A/newW;
int newW2 = image2->w();//(int)(newW+0.5);
int newH2 = image2->h();// (int)(newH+0.5);
//std::cout<<"w="<<newW2<<":"<<newW<<"\\nH="<<newH2<<"::"<<newH<<std::endl;

widget->size(newW2,newH2);
widget->image(image2->copy());
delete(image2);
win->redraw();
//resizeImage(widget);} {selected
    }
  }
  Function {comma_vector(std::string LINE,std::vector<std::string> Vector)} {return_type {std::vector<std::string>}
  } {
    code {std::string original,preComma,postComma;
original=LINE;
unsigned int found,finder;
finder=original.length();
for(found=original.find(",");found<finder;found=original.find(",")){
  preComma=original;
  postComma=original;
  preComma=preComma.erase(found,std::string::npos);
  if(preComma.compare("")!=0){Vector.push_back(preComma);}
  postComma=postComma.erase(0,found+1);
  original=postComma;
  finder=original.length();
}
if(postComma.compare("")!=0){Vector.push_back(postComma);}
return Vector;} {}
  }
  Function {convert_num_to_string(int num)} {return_type {std::string}
  } {
    code {std::string number;
std::stringstream out;
out << num;
number = out.str();
return number;} {}
  }
  Function {convert_string_to_number(std::string num)} {return_type {unsigned int}
  } {
    code {if(num.compare("")==0){return 0;}
std::stringstream out;
out << num;
unsigned int integer;
out >> integer;
return integer;} {}
  }
  Function {current_path(int whichPath)} {return_type {std::string}
  } {
    code {unsigned int lastPath = 0;
std::string result;
if (whichPath >=1){lastPath = whichPath - 1;}
else {lastPath = 0;}
const char* path =getenv("PATH");
std::string stringPATH;
if(path == NULL){stringPATH = "/usr/bin";}
else{stringPATH = path;}
std::string::size_type firstPosition = stringPATH.find(':');
if(firstPosition>stringPATH.length()){return stringPATH.c_str();}   
std::string::size_type position = firstPosition;
for (int i=1;i<=whichPath;i++){position = stringPATH.find(':',position+1);}
for (unsigned int j=1;j<=lastPath;j++){firstPosition = stringPATH.find(':',firstPosition+1);}
result = stringPATH.substr (firstPosition+1,((position-firstPosition)-1));
return result;} {}
  }
  Function {delimiter_vector_from_string(std::string string_to_become_vector,std::string delimiter)} {return_type {std::vector<std::string>}
  } {
    code {std::vector<std::string> Vector;
std::string original,preComma,postComma;
original=string_to_become_vector;
unsigned int found,finder;
finder=original.length();
if(original.find(delimiter)>original.length()){
  Vector.push_back(original);
  return Vector;
}
for(found=original.find(delimiter);found<finder;found=original.find(delimiter)){
  preComma=original;
  postComma=original;
  preComma=preComma.erase(found,std::string::npos);
  if(preComma.compare("")!=0){Vector.push_back(preComma);}
  postComma=postComma.erase(0,found+1);
  original=postComma;
  finder=original.length();
}
if(postComma.compare("")!=0){Vector.push_back(postComma);}
return Vector;} {}
  }
  Function {desktop_dirs()} {return_type {std::vector<std::string>}
  } {
    code {std::string envVar ="XDG_DATA_DIRS";
std::string incasenothingexists="/usr/local/share/:/usr/share/";
std::vector<std::string> thisPath;
std::vector<std::string>::iterator it;
std::string thisXDG;
const char* datadirs=getenv(envVar.c_str());
if (datadirs == NULL)
{
  thisXDG=incasenothingexists;
}
else
{
  thisXDG=datadirs;
}
unsigned int numberOfPaths;
std::string tempXDG = thisXDG;
unsigned int tryer=0;
unsigned int xdgLen=0;
xdgLen=thisXDG.length();
for (numberOfPaths=0;tryer<xdgLen;)
{
  tryer = tempXDG.find(":");
  tempXDG=tempXDG.erase(0,tryer+1);
  xdgLen=tempXDG.length();
  numberOfPaths++;
}
unsigned int lastPath = 0;
std::string result;
for (unsigned int whichPath=1;whichPath<=numberOfPaths;whichPath++)
{
  if (whichPath >=1){lastPath = whichPath - 1;}
  else {lastPath = 0;}
  std::string::size_type firstPosition = thisXDG.find_first_of(':');
  std::string::size_type position = thisXDG.find(':');
  for (unsigned int i=1;i<=whichPath;i++){position = thisXDG.find(':',position+1);}
  for (unsigned int j=1;j<=lastPath;j++){firstPosition = thisXDG.find(':',firstPosition+1);}
  result = thisXDG.substr (firstPosition+1,((position-firstPosition)-1));
  thisPath.push_back(result);    
}
std::sort (thisPath.begin(), thisPath.end());
it = std::unique (thisPath.begin(), thisPath.end());
thisPath.resize( std::distance(thisPath.begin(),it) );
return thisPath;} {}
  }
  Function {display_text(std::string text, Fl_Widget *o)} {} {
    code {o->copy_label(text.c_str());
o->redraw();} {}
  }
  Function {file_to_string(std::string filename)} {return_type {std::string}
  } {
    code {if(filename.compare("")==0){return "";}
/** make sure it is actually a file */
if(!test_file(filename)){trace("No file sent in: "+filename);}
std::string thisLine;
std::string fullString;
std::ifstream inputFileStream(filename.c_str(), std::ifstream::in);
if(inputFileStream.is_open())
{
  while (getline(inputFileStream,thisLine))
  {
    if(fullString.compare("")==0){fullString=thisLine;}
    else{fullString=fullString+"\\n"+thisLine;}
  }
}
return fullString;} {}
  }
  Function {find_xdg_data_dir_subdir(std::string subdir)} {return_type {std::string}
  } {
    code {std::vector<std::string> xdgDataDirs = desktop_dirs();
std::string dirToOpen;
for( std::vector<std::string>::iterator it = xdgDataDirs.begin();
it!=xdgDataDirs.end();
++it)
{
  dirToOpen=*it;
  unsigned int finder=dirToOpen.rfind('/');
  if(finder+1==dirToOpen.length()){dirToOpen+=subdir;}
  else
  {
    dirToOpen+="/";
    dirToOpen+=subdir;
  }
  if(test_dir(dirToOpen))
  {
    if(finder+1==dirToOpen.length()){return dirToOpen;}
    else
    {
      dirToOpen+="/";
      return dirToOpen;
    }
  }
  else{trace(dirToOpen+" does not exist");}
}
return "";} {}
  }
  Function {get_directory_from_filename(std::string input)} {return_type {std::string}
  } {
    code {std::string filename = input;
unsigned int finder=filename.rfind("/");
if(finder<filename.length())
{
  filename=filename.erase(finder+1,std::string::npos);
}
else{return "";} /**return empty if there is no directory*/
return filename;} {}
  }
  Function {get_equal_value(std::string INTERNAL_LINE)} {return_type {std::string}
  } {
    code {std::string subString;
unsigned int found =INTERNAL_LINE.find("=");
if(found < INTERNAL_LINE.length())
{
 subString=INTERNAL_LINE.substr(found+1,std::string::npos);
 return subString;
}
return "";} {}
  }
  Function {get_file_vector(std::string DIRECTORY,std::string file)} {return_type {std::vector<std::string>}
  } {
    code {std::vector<std::string> myVector;
if(!test_dir(DIRECTORY)){return myVector;}
if(DIRECTORY.compare("")==0){return myVector;}
if(file.compare("")==0){return myVector;}
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(DIRECTORY.c_str());
if(DIRECTORY.rfind('/')!=DIRECTORY.length()-1){DIRECTORY+="/";}
if(mydir!=NULL)
{
  while ((entryPointer=readdir(mydir))!=NULL)
  {
    if((entryPointer->d_type == DT_REG)&&(entryPointer->d_name[0]!='.'))
    {
      std::string fullpath=entryPointer->d_name;
      fullpath=DIRECTORY+fullpath;
      unsigned int findIT = fullpath.find(file);
      if(findIT<=fullpath.length()){myVector.push_back(fullpath);}

    }
    if((entryPointer->d_type==DT_DIR)&&(entryPointer->d_name[0]!='.'))
    {
      std::string fullpath=entryPointer->d_name;
      fullpath=DIRECTORY+fullpath;
      if(fullpath.rfind('/')!=fullpath.length()-1){fullpath+="/";}
      std::string thisAnswer=look_for_file_in_subdirs(file,fullpath);
      if(thisAnswer.compare("")!=0)
      {
        std::string temp=fullpath+file;
        myVector.push_back(temp);
      }
    }
  }
}
myVector=sort_array(myVector);
return myVector;} {}
  }
  Function {get_fl_color(XColor *c)} {return_type {unsigned int}
  } {
    code {int red = (int)c->red>>8;
int green = (int)c->green>>8;
int blue = (int)c->blue>>8;
//std::cout<<"r="<<red<<" g="<<green<<" b="<<blue<<std::endl;
char tmp[8];
std::snprintf(tmp, sizeof(tmp), "%02x%02x%02x", red, green, blue);
std::string output = tmp;
output="0x"+output+"00";
return strtoul(output.c_str(),0,16);} {}
  }
  Function {get_line_with_delim(std::string filename, std::string line,std::string delim)} {return_type {std::string}
  } {
    code {if(line.compare("")==0){return "";}
if(filename.compare("")==0){return "";}
if(!test_file(filename)){trace("get_line_with_delim::No file sent in\\n"+filename+","+line);}
std::string thisLine;
std::string subString;
std::ifstream inputFileStream(filename.c_str(), std::ifstream::in);
std::string hash="\#";
std::string itemToFind=line+delim;
unsigned int len=itemToFind.length();
if(inputFileStream.is_open())
{
  while (getline(inputFileStream,thisLine))
  {
    if(thisLine.find(hash)<=1){}
    else
    {
      unsigned int found=thisLine.find(itemToFind);
      if(found<thisLine.length())
      {
        found+=len;
        subString=thisLine.substr(found,std::string::npos);
        return subString;
      }
    }
  }
}
return "";} {}
  }
  Function {get_line_with_equal(std::string filename, std::string line)} {return_type {std::string}
  } {
    code {return get_line_with_delim(filename,line,"=");} {}
  }
  Function {getProcIdByName(std::string procName)} {return_type int
  } {
    code {int pid = -1;
if(procName.compare("")==0){return -1;}
// Open the /proc directory
DIR *dp = opendir("/proc");
if (dp != NULL)
{
  // Enumerate all entries in directory until process found
  struct dirent *dirp;
  while (pid < 0 && (dirp = readdir(dp)))
  {
  // Skip non-numeric entries
    int id = atoi(dirp->d_name);
    if (id > 0)
    {
  // Read contents of virtual /proc/{pid}/cmdline file
      std::string cmdPath = std::string("/proc/") + dirp->d_name + "/cmdline";
      std::ifstream cmdFile(cmdPath.c_str());
      std::string cmdLine;
      getline(cmdFile, cmdLine);
      if (!cmdLine.empty())
      {
    // Keep first cmdline item which contains the program path
        size_t pos = cmdLine.find('\\0');
        if (pos != std::string::npos){cmdLine = cmdLine.substr(0, pos);}
    // Keep program name only, removing the path
        pos = cmdLine.rfind('/');
        if (pos != std::string::npos){cmdLine = cmdLine.substr(pos + 1);}
    // Compare against requested process name
        if (procName == cmdLine){pid = id;}
      }
    }
  }
}
closedir(dp);
std::cout<<"Process Name="<<procName<<" pid="<<pid<<std::endl;
return pid;} {}
  }
  Function {get_shell_for_C()} {return_type {std::string}
  } {
    code {std::string shell=term_out("which bash");
if(shell.compare("")==0){
  if(!test_exec(shell)){
  shell=term_out("which sh");
  if(!test_exec(shell)){return "";}
  //TODO make this work for others
  }
}
shell=shell+" -c '";
return shell;} {}
  }
  Function {get_symlinkpath(std::string symlink)} {return_type {std::string}
  } {
    code {struct stat statinfo;
if((lstat(symlink.c_str(), &statinfo)>0)){return symlink;}
if ((!S_ISLNK (statinfo.st_mode) && statinfo.st_nlink > 1)||(S_ISLNK (statinfo.st_mode)))
{
  std::vector<char> buf(400);
  size_t len;
  do
  {
    buf.resize(buf.size() + 100);
    len = ::readlink(symlink.c_str(), &(buf[0]), buf.size());
  }
  while(buf.size() == len);
  if (len > 0)
  {
    buf[len] = '\\0';
    return (std::string(&(buf[0])));
  }
}
else
{
  return symlink;
}
return symlink;} {}
  }
  Function {has_file_extention_at_end(std::string filename,std::string extention)} {return_type bool
  } {
    code {std::string extention_check;
std::transform(filename.begin(), filename.end(), filename.begin(), ::tolower);
std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
unsigned int found=filename.find(extention);
unsigned int ext_len=extention.length();
unsigned int file_len=filename.length();
if(found<file_len)
{
  if(found==(file_len-ext_len))
  {
    return true;
  }
}
return false;} {}
  }
  Function {items_in_path()} {return_type {unsigned int}
  } {
    code {const char* path =getenv("PATH");
std::string::size_type pathPosition =0;
if(path==NULL){return 1;}
std::string stringPATH = path;
unsigned int howmany;
for(howmany=1;(pathPosition!=std::string::npos);howmany++)
{
  pathPosition=stringPATH.find(':', pathPosition+1);
}
return howmany;} {}
  }
  Function {join_string_vectors(std::vector<std::string> vectorA,std::vector<std::string> vectorB)} {return_type {std::vector<std::string>}
  } {
    code {std::vector<std::string> bothVectors;
bothVectors.reserve(vectorA.size()+vectorB.size());
bothVectors.insert(bothVectors.end(),vectorA.begin(),vectorA.end());
bothVectors.insert(bothVectors.end(),vectorB.begin(),vectorB.end());
return bothVectors;} {}
  }
  Function {load_file(std::string filename, Fl_Widget *o)} {} {
    code {if( (filename.compare("")==0) || (!test_file(filename)) )
  return;
display_text(file_to_string(filename),o);} {}
  }
  Function {look_for_file_in_subdirs(std::string fileWITHOUTpath,std::string dir)} {return_type {std::string}
  } {
    code {if((dir.compare("")==0)
||(fileWITHOUTpath.compare("")==0))
  return "";

/** if it is not a directory return empty */
if(!test_dir(dir))
  return "";

/** remove the preceding path*/
unsigned int found=fileWITHOUTpath.rfind('/');
if(found<fileWITHOUTpath.length())
{
  unsigned int len=fileWITHOUTpath.length()-found;
  fileWITHOUTpath=fileWITHOUTpath.erase(0,len);
}

std::string ANSWERS;
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(dir.c_str());

/** open the directory */
if(mydir!=NULL){
  while ((entryPointer=readdir(mydir))!=NULL)
  {
  /** find out if it is a symlink or regular file that is not hidden*/
    if(((entryPointer->d_type == DT_LNK)
    ||(entryPointer->d_type == DT_REG))
    &&(entryPointer->d_name[0]!='.'))
    {
      std::string fullpath=entryPointer->d_name;
      if(dir.rfind('/')!=dir.length()-1){dir+="/";}
      fullpath=dir+fullpath;
      unsigned int findIT = fullpath.find(fileWITHOUTpath);
      if(findIT<=fullpath.length())
      {
    /** add a comma at the end if there isn't one already*/
        if(ANSWERS.rfind(",")!=ANSWERS.length()-1)ANSWERS+=",";
        ANSWERS+=fullpath;
      }
    }
    /** find out if it is a directory that is not hidden*/
    if((entryPointer->d_type==DT_DIR)
    &&(entryPointer->d_name[0]!='.'))
    {
      std::string fullpath=entryPointer->d_name;
      if(dir.rfind('/')!=dir.length()-1){dir+="/";}
      fullpath=dir+fullpath;
      std::string thisAnswer=look_for_file_in_subdirs(fileWITHOUTpath,fullpath);
      if(thisAnswer.compare("")!=0)
      {
        if(ANSWERS.rfind(",")!=ANSWERS.length()-1)
        {
          ANSWERS+=",";
        }
        ANSWERS+=thisAnswer;
      }
    }
  }
}
closedir(mydir);
if(ANSWERS.compare("")!=0)
{
  return ANSWERS;
}
return "";} {}
  }
  Function {look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir)} {return_type {std::string}
  } {
    code {if((dir.compare("")==0)
||(fileWITHOUTpath.compare("")==0))
{
  trace("std::string look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir) requires non empty variables to work\\nMUST EXIT");
  return "";
}
if(!test_dir(dir))
{
  trace("look_for_first_file_in_subdirs::"+dir+" is not a directory\\nMUST EXIT");
  return "";
}
unsigned int found=fileWITHOUTpath.rfind('/');
if(found<fileWITHOUTpath.length())
{
  unsigned int len=fileWITHOUTpath.length()-found;
  fileWITHOUTpath=fileWITHOUTpath.erase(0,len);
}
std::string ANSWERS;
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(dir.c_str());
std::string finalAnswer;
if(mydir!=NULL)
{
  while ((entryPointer=readdir(mydir))!=NULL)
  {
    std::string fullpath=entryPointer->d_name;
    if(dir.rfind('/')!=dir.length()-1){dir+="/";}
    fullpath=dir+fullpath;
  /** if it is a symlink or file check it */
    if(((entryPointer->d_type == DT_LNK)
      ||(entryPointer->d_type == DT_REG))
      &&(entryPointer->d_name[0]!='.'))
    {
      std::string tempFINDER="/"+fileWITHOUTpath;
      trace("look_for_first_file_in_subdirs::FINDER:"+tempFINDER+"\\nfullpath="+fullpath);
      unsigned int findIT = fullpath.find(tempFINDER);
      if(findIT<=fullpath.length())
      {
        if(entryPointer->d_type == DT_LNK)
        {
    /** if it is a symlink get the actual file */
          std::string temporary=get_symlinkpath(fullpath);
          trace("look_for_first_file_in_subdirs::SYMLINK="+fullpath+"\\nFile="+temporary);
          if(temporary.compare("")!=0)
          {
            closedir(mydir);
            if(temporary.find("/")>temporary.length()){temporary=dir+temporary;}
            trace("look_for_first_file_in_subdirs::Symlink="+temporary);
            finalAnswer=temporary;
            return temporary;
          }
        }
        else
        {
          closedir(mydir);
          finalAnswer=fullpath;
          return fullpath;
        }
      }
    }
  /** if it is a directory look inside recursively */
    if((entryPointer->d_type==DT_DIR)
     &&(entryPointer->d_name[0]!='.'))
    {
      std::string thisAnswer=look_for_first_file_in_subdirs(fileWITHOUTpath,fullpath);
      if(thisAnswer.compare("")!=0)
      {
        if(test_file(thisAnswer))
        {
          closedir(mydir);
          finalAnswer=thisAnswer;
          return thisAnswer;
        }
      }
    }
  }
  closedir(mydir);
}
else{trace("look_for_first_file_in_subdirs::"+dir+" cannot be opened\\nMUST EXIT");}
trace("look_for_first_file_in_subdirs::Final Answer="+finalAnswer);
return finalAnswer;} {}
  }
  Function {look_for_string_in_vector(std::vector<std::string> vector_to_check,std::string item_to_find)} {return_type bool
  } {
    code {for( std::vector<std::string>::iterator it = vector_to_check.begin();
it!=vector_to_check.end();
++it){
  std::string tmp=*it;
  if(tmp.compare(item_to_find)==0){return true;}
}
return false;} {}
  }
  Function {make_icon(Fl_Window *o)} {open
  } {
    code {Fl_Pixmap f(flimage_xpm);
const Fl_Pixmap * flpad_xpm_icon = &f;
const Fl_RGB_Image *img = new Fl_RGB_Image(flpad_xpm_icon,FL_GRAY);
o->icon(img);} {}
  }
  Function {make_window()} {open
  } {
    Fl_Window win {
      label {Image Viewer} open
      xywh {772 138 385 375} type Double when 3 hide resizable
      code0 {make_icon(o);} xclass flimage
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 385 25} box FLAT_BOX color 38 selection_color 80 labelcolor 7 textcolor 7
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {&Open}
            callback {open_cb();}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {&Exit}
            callback {exit(0);}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Button {} {
        label {@<}
        callback {if(!left_cb())
{
  trace("Could not move left in:"+CURRENT_DIR+" based on:"+CURRENT_FILE);
}}
        tooltip {Press ',' to use this} xywh {325 27 25 25} box FLAT_BOX shortcut 0x2c color 23
      }
      Fl_Button {} {
        label {@>}
        callback {if(!right_cb())
{
  trace("Could not move right in:"+CURRENT_DIR+" based on:"+CURRENT_FILE);
}}
        tooltip {Press '.' to use this} xywh {355 27 25 25} box FLAT_BOX shortcut 0x2e color 23
      }
      Fl_Button open_button {
        callback {open_cb();}
        xywh {5 27 25 25} box FLAT_BOX color 23
      }
      Fl_Button zoom_in_button {
        callback {zoom();}
        xywh {85 27 25 25} box FLAT_BOX shortcut 0x3d color 23
      }
      Fl_Button zoom_out_button {
        callback {zoom(true);}
        xywh {115 27 25 25} box FLAT_BOX shortcut 0x2d color 23 labelfont 1 labelsize 30
        code0 {button_style(1);}
      }
      Fl_Scroll {} {open
        xywh {0 55 385 320} resizable
        code0 {viewer = new ImageBox();//FL_FLAT_BOX,0, 55, 385, 320);}
      } {}
    }
  }
  Function {program_is_running(std::string program_line)} {return_type bool
  } {
    code {if(program_line.compare("")==0){return false;}
int pid=getProcIdByName(program_line);
if(pid>0){return true;}
std::string pgrepProg=term_out("which pgrep");
if(pgrepProg.compare("")==0)
{
  //TODO: make a way for this to still check...
  return false;
}
  //std::cout<<"pgrep is "+pgrepProg<<std::endl;
std::string shell=get_shell_for_C();
if(shell.compare("")==0)return false;
  //std::cout<<"Using shell command="+shell<<std::endl;
std::string processline=program_line;
std::string pgrep = shell + " "+pgrepProg+" "+program_line+ "'";
  //std::cout<<"Total command to run:\\n"+pgrep<<std::endl;
std::string returnVal=term_out(pgrep);
if(returnVal.compare("")==0){return false;}
return true;} {}
  }
  Function {remove_cruft(std::string StringInput, std::string CruftToRemove)} {return_type {std::string}
  } {
    code {if((StringInput.compare("")==0)||(CruftToRemove.compare("")==0)){return StringInput;}
unsigned int found=0;
unsigned int cruftLength=CruftToRemove.length();
found=StringInput.find(CruftToRemove);
if(found>StringInput.length()){return StringInput;}
std::string temp=StringInput;
temp=temp.erase(0,found+cruftLength);
if(temp.compare("")!=0){return temp;}
std::string temp2=StringInput;
temp2=temp2.erase(found,std::string::npos);
if(temp2.compare("")!=0){return temp2;}
trace("remove_cruft::There was a problem removing the cruft.... Giving you back your string");
return StringInput;} {}
  }
  Function {run_a_program_in_background(std::string program)} {return_type int
  } {
    code {std::string shell=get_shell_for_C();
program += " &disown";
if(shell.compare("")!=0){
  shell+=program;
  shell+="'";
}
else{shell=program;}
trace("run_program_in_background::"+shell);
return system(shell.c_str());} {}
  }
  Function {run(std::string program)} {return_type int
  } {
    code {std::string shell=get_shell_for_C();
if(shell.compare("")!=0)
{
  shell+=program;
  shell+="'";
}
else{shell=program;}
trace("run_program::"+shell);
return system(shell.c_str());} {}
  }
  Function {run_in_bg(void *userdata)} {return_type {static void*}
  } {
    code {while(true){
printf("Hello, World!\\n");
}} {}
  }
  Function {sed_i(std::string input, std::string remove, std::string replace)} {return_type {std::string}
  } {
    code {unsigned int xmlfix=0;
unsigned int oldFind=0;
unsigned int length=input.length();
unsigned int removeLength=remove.length();
std::string modinput=input;
while(modinput.find(remove,oldFind)<length)
{
  xmlfix = modinput.find(remove,oldFind);
  oldFind=xmlfix+replace.length();
  std::string tempPRE,tempPOST,temp;
  if(xmlfix<length)
  {
    temp=modinput;
    tempPOST=modinput;
    tempPRE = temp.erase(xmlfix,std::string::npos);
    tempPOST = modinput.erase(0,xmlfix+removeLength);
    modinput = tempPRE + replace + tempPOST;
    length=modinput.length();
  }
}
return modinput;} {}
  }
  Function {sort_array(std::vector<std::string> vector_to_sort)} {return_type {std::vector<std::string>}
  } {
    code {std::vector<std::string>::iterator it;
std::sort (vector_to_sort.begin(), vector_to_sort.end());
it = std::unique (vector_to_sort.begin(), vector_to_sort.end());
vector_to_sort.resize( std::distance(vector_to_sort.begin(),it) );
return vector_to_sort;} {}
  }
  Function {test_dir(std::string dirToTest)} {return_type bool
  } {
    code {if(dirToTest.compare("")==0){return false;}
DIR *dir = NULL;
dir = opendir(dirToTest.c_str());
if (dir!=NULL)
{
  closedir(dir);
  return true;
}
return false;} {}
  }
  Function {test_exec(std::string execToTest)} {return_type bool
  } {
    code {if(execToTest.compare("")==0){return false;}
/** the list of directories it might check*/
/** /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games*/
std::string stringEXEC;
std:: string testPATH, testExec;
bool result = false;
unsigned int numofpaths = items_in_path();
for (unsigned int i = 1; i <= numofpaths; i++)
{
  stringEXEC = execToTest;
  testPATH = current_path(i);
  stringEXEC = testPATH + "/" + stringEXEC;
  if(test_file(stringEXEC.c_str())){return true;}
}
return result;} {}
  }
  Function {test_file(std::string fileWithFullPATH)} {return_type bool
  } {
    code {if(fileWithFullPATH.compare("")==0){return false;}
std::string dir=get_directory_from_filename(fileWithFullPATH);
if(dir.compare("")==0){return false;}
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(dir.c_str());
if(mydir!=NULL)
{
  while ((entryPointer=readdir(mydir))!=NULL)
  {
    if(entryPointer->d_type == DT_REG)
    {
      std::string fullpath=entryPointer->d_name;
      if(dir.rfind('/')!=dir.length()-1){dir+="/";}
      fullpath=dir+fullpath;
      if(fullpath.compare(fileWithFullPATH)==0)
      {
        closedir(mydir);
        return true;
      }
    }
  }
  closedir(mydir);
}
else{trace("could not open directory to search for "+fileWithFullPATH);}
return false;} {}
  }
  Function {test_file_in_vector_path(std::string fileWithNOPATH,std::vector<std::string> directories_to_check)} {return_type {std::string}
  } {
    code {if(fileWithNOPATH.compare("")==0){return "";}
std::string filePathRemoved=fileWithNOPATH;
unsigned int found=filePathRemoved.rfind('/');
trace("test_file_in_vector_path::Looking for:"+fileWithNOPATH);
if(found<filePathRemoved.length())
{
  unsigned int len=filePathRemoved.length()-found;
  filePathRemoved=filePathRemoved.erase(0,len);
}
for( std::vector<std::string>::iterator it = directories_to_check.begin();
  it!=directories_to_check.end();
  ++it)
{
  std::string dirToOpen=*it;
  std::string result=dirToOpen;
  unsigned int finder=dirToOpen.rfind('/');
  if(finder+1==dirToOpen.length()){result+=filePathRemoved;}
  else
  {
    result+="/";
    result+=filePathRemoved;
  }
  if(test_file(result))
  {
    trace("test_file_in_vector_path::FOUND="+result);
    return result;
  }
  else
  {
    std::string tmp=result;
    tmp=get_symlinkpath(tmp);
    if(tmp.compare("")!=0){return test_file_in_vector_path(tmp,directories_to_check);}
  }
}
return "";} {}
  }
  Function {term_out(std::string terminal_Command_You_Want_Output_From)} {return_type {std::string}
  } {
    code {if(terminal_Command_You_Want_Output_From.compare("")==0){return "";}
/** set a locale so this works well */
const char* LANG=getenv("LANG");
std::string LOCALE;
if(LANG==NULL)
{
  LANG=getenv("LANGUAGE");
  if(LANG!=NULL){
  std::string tmp=LANG;
  unsigned int find=tmp.find(".UTF-8");
  if(find>tmp.length()){tmp+=".UTF-8";}
  LOCALE=tmp;
  }
}
else
{
  LOCALE=LANG;
}
if(LOCALE.compare("")!=0){setlocale(LC_ALL, LOCALE.c_str());}
std::string result="";
const int max_buffer = 1024;
char buffer[max_buffer];
FILE *command_p = popen(terminal_Command_You_Want_Output_From.c_str(), "r");
if (command_p)
{
  while( fgets(buffer, sizeof(buffer), command_p) !=NULL){result.append(buffer);}
  pclose(command_p);
}
else{ return "";}
if (result.compare("")==0){return "";}
int end = result.length();
if((end-1) == 0){return "";}
if((end) == 0){return "";}
return result.erase(end-1,1);} {}
  }
  Function {resizeImage(Fl_Widget * widget)} {open return_type void
  } {
    code {std::string icon_file=CURRENT_DIR+CURRENT_FILE;
if(icon_file.compare("")==0)
{
  trace("changeWidgetImage::Image file is empty");
  return;
}
widget->align(FL_ALIGN_CENTER);
widget->copy_label("");
widget->image(NULL);
widget->redraw();
widget->label(0L);
int w=widget->w();
int h=widget->h();
if(!test_file(icon_file))
{
  trace("changeWidgetImage:: "+icon_file+" is not an Image");
  return;
}
if(icon_file.compare("")==0)
{
  trace("changeWidgetImage::Image file is empty");
  return;
}

Fl_Image* image2=widget->image();//new Fl_Image(w,h,4);

if(has_file_extention_at_end(icon_file,".png"))
{
  Fl_Image* image = new Fl_PNG_Image(icon_file.c_str());
  image2 = image->copy(w,h);
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".xpm"))
{
  Fl_Image* image = new Fl_XPM_Image(icon_file.c_str());
  image2 = image->copy(w,h);
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".xbm"))
{
  Fl_Image* image = new Fl_XBM_Image(icon_file.c_str());
  image2 = image->copy(w,h);
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".svg"))
{
  NSVGimage *svg_image = NULL;
  NSVGrasterizer *rast = NULL;
  unsigned char* img_data = NULL;
  int width;
  int height;
  const int depth = 4;
  svg_image = nsvgParseFromFile(icon_file.c_str(), "px", 96);
  if (svg_image == NULL)
  {
    trace("changeWidgetImage::Could not open SVG image:"+icon_file);
    return;
  }
  width = (int)svg_image->width;
  height = (int)svg_image->height;
  rast = nsvgCreateRasterizer();
  if (rast == NULL)
  {
    trace("changeWidgetImage::Could not init rasterizer.");
    return;
  }
  img_data = (unsigned char*)malloc(width * height * depth);
  if (img_data == NULL)
  {
    trace("changeWidgetImage::Could not alloc image buffer.\\n");
    return;
  }
  nsvgRasterize(rast, svg_image, 0, 0, 1, img_data, width, height, (width * depth));
  Fl_Image* image  = new Fl_RGB_Image(img_data, width, height, 4);
  image2 = image->copy(w,h);
  delete(image);
  nsvgDeleteRasterizer(rast);
  nsvgDelete(svg_image);
}
else if((has_file_extention_at_end(icon_file,".jpg"))||
(has_file_extention_at_end(icon_file,".jpeg"))||
(has_file_extention_at_end(icon_file,".face")))
{
  Fl_Image* image = new Fl_JPEG_Image(icon_file.c_str());
  image2 = image->copy(w,h);
  delete(image);
}
else if(has_file_extention_at_end(icon_file,".gif"))
{
  Fl_Image* image = new Fl_GIF_Image(icon_file.c_str());
  image2 = image->copy(w,h);
  delete(image);
}
else{return;}
widget->size(image2->w(),image2->h());
widget->image(image2->copy());
delete(image2);
widget->show();
win->redraw();} {}
  }
  Function {open_cb()} {} {
    code {const char* home=getenv("HOME");
std::string DIR=home;
if(home==NULL)
{
  DIR="/tmp";
}
else
{
  std::string tmp = DIR;
  tmp+="/Pictures";
  if(test_dir(tmp))
    DIR=tmp;
}
char *newfile = fl_file_chooser("Open", "*.{jpg,jpeg,png,gif,bmp,svg,xbm,xpm}", DIR.c_str(),0);
if (newfile != NULL)
{
  std::string tmp = newfile;
  view_image(tmp);  
}} {}
  }
  Function {right_cb()} {return_type bool
  } {
    code {if(CURRENT_DIR.compare("")==0)
  return false;
if(CURRENT_FILE.compare("")==0)
  return false;

bool NEXT=false;
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(CURRENT_DIR.c_str());
if(mydir!=NULL)
{
  while ((entryPointer=readdir(mydir))!=NULL)
  {
    if(entryPointer->d_type == DT_REG)
    {
      std::string fullpath=entryPointer->d_name;
      fullpath=CURRENT_DIR+fullpath;
      if(NEXT)
      {
        return view_image(fullpath);
      }
      if(fullpath.compare(CURRENT_FILE)==0)
      {
        NEXT=true;
      }
      else
      {
        std::string tmp = CURRENT_DIR + CURRENT_FILE;
        if(fullpath.compare(tmp)==0)
        {
          NEXT=true;
        }

      }
    }
  }
}
return false;} {}
  }
  Function {left_cb()} {return_type bool
  } {
    code {if(CURRENT_DIR.compare("")==0)
  return false;
if(CURRENT_FILE.compare("")==0)
  return false;

std::string previous;
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(CURRENT_DIR.c_str());
if(mydir!=NULL)
{
  while ((entryPointer=readdir(mydir))!=NULL)
  {
    if(entryPointer->d_type == DT_REG)
    {
      std::string fullpath=entryPointer->d_name;
      fullpath=CURRENT_DIR+fullpath;
      if(fullpath.compare(CURRENT_FILE)==0)
      {
        return view_image(previous);
      }
      else
      {
        std::string tmp = CURRENT_DIR + CURRENT_FILE;
        if(fullpath.compare(tmp)==0)
        {
           return view_image(previous);
        }
      }

      previous=fullpath;
    }
  }
}
return false;} {}
  }
  Function {view_image(std::string filename)} {return_type bool
  } {
    code {if(filename.compare("")==0)
  return false;
CURRENT_FILE=filename;
CURRENT_DIR=get_directory_from_filename(filename);
viewer->position(0, 55);
changeWidgetImage(CURRENT_FILE,viewer);
unsigned int finder=filename.rfind("/");
if(finder<filename.length())
{
  filename=CURRENT_FILE.erase(0,finder+1);
}
win->label(filename.c_str());
return true;} {}
  }
  Function {handle(int e)} {return_type int
  } {
    code {switch(e)
{
  case FL_Up:
  case FL_Right:
    right_cb();
    break;
  case FL_Down:
  case FL_Left:
    left_cb();
    break;
}
return e;} {}
  }
  Function {zoom(bool out=false)} {} {
    code {if(CURRENT_FILE.compare("")==0)
  return;
int w = viewer->w();
int h = viewer->h();
int scaleW = w * 0.10;
int scaleH = h * 0.10;
if(out)
{
  w = w - scaleW;
  h = h - scaleH; 
}
else
{
  w = w + scaleW;
  h = h + scaleH;
}
viewer->size(w,h);
resizeImage(viewer);} {}
  }
} 

Function {main(int argc, char *argv[])} {open return_type int
} {
  code {Fl::visual(FL_RGB);
UserInterface* ui = new UserInterface;
try
{
  ui->make_window()->show();
  if (argc > 1)
  {
    char* charchar1 = argv[1];
    fl_decode_uri(charchar1);
    trace(charchar1);
    std::string fname = charchar1;
    unsigned int URI  = fname.find("file:///");
    if(URI==0)
    {
      fname = fname.substr(URI+7,std::string::npos);
    }
    ui->view_image(fname);
  }

  return Fl::run();
}
catch (const std::exception& e){
  std::cerr << "Unhandled exception:\\n" << e.what() << std::endl;
  return EXIT_FAILURE;
}
catch (...){
  std::cerr << "Unknown exception!" << std::endl;
  return EXIT_FAILURE;
}} {}
} 

Function {trace(std::string msg)} {open
} {
  code {std::cout<<msg<<std::endl;} {}
} 
