// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef flimage_h
#define flimage_h
#include <FL/Fl.H>
#include "../include/toolbar_icons.h"
#include <X11/Xlib.h>
#include <FL/filename.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_JPEG_Image.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_XBM_Image.H>
#include <FL/Fl_XPM_Image.H>
#include <FL/Fl_GIF_Image.H>
#include <stdexcept>
#include <string>
#include <iostream>
#include <fstream>
#include <vector>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <sys/sendfile.h>  // sendfile
#include <algorithm>
#include <float.h>
#include <sstream>
#include <float.h>
#include <dirent.h>
#include <sys/stat.h>
#include <langinfo.h>
#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <fstream>
#include <sstream>
#include <errno.h>
#include <locale.h>
#include <unistd.h>
#include <signal.h>
#define NANOSVG_ALL_COLOR_KEYWORDS
#define NANOSVG_IMPLEMENTATION
#include "../include/nanosvg.h"
#define NANOSVGRAST_IMPLEMENTATION
#include "../include/nanosvgrast.h"
#include <string>
#include <vector>

class ImageBox : public Fl_Box {
public:
  int handle(int e);
  ImageBox(Fl_Boxtype b=FL_FLAT_BOX, int X=0, int Y=55, int W=385, int H=320, const char *l=NULL);
};
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Scroll.H>

class UserInterface {
protected:
  ImageBox *viewer; 
  std::string CURRENT_DIR; 
  std::string CURRENT_FILE; 
public:
  UserInterface();
  Fl_Double_Window* about_window();
  Fl_Double_Window *about_win;
private:
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  void about_text(Fl_Widget* o);
  void button_style(int style=0);
  void changeWidgetImage(std::string icon_file, Fl_Widget * widget);
  std::vector<std::string> comma_vector(std::string LINE,std::vector<std::string> Vector);
  std::string convert_num_to_string(int num);
  unsigned int convert_string_to_number(std::string num);
  std::string current_path(int whichPath);
  std::vector<std::string> delimiter_vector_from_string(std::string string_to_become_vector,std::string delimiter);
  std::vector<std::string> desktop_dirs();
  void display_text(std::string text, Fl_Widget *o);
  std::string file_to_string(std::string filename);
  std::string find_xdg_data_dir_subdir(std::string subdir);
  std::string get_directory_from_filename(std::string input);
  std::string get_equal_value(std::string INTERNAL_LINE);
  std::vector<std::string> get_file_vector(std::string DIRECTORY,std::string file);
  unsigned int get_fl_color(XColor *c);
  std::string get_line_with_delim(std::string filename, std::string line,std::string delim);
  std::string get_line_with_equal(std::string filename, std::string line);
  int getProcIdByName(std::string procName);
  std::string get_shell_for_C();
  std::string get_symlinkpath(std::string symlink);
  bool has_file_extention_at_end(std::string filename,std::string extention);
  unsigned int items_in_path();
  std::vector<std::string> join_string_vectors(std::vector<std::string> vectorA,std::vector<std::string> vectorB);
  void load_file(std::string filename, Fl_Widget *o);
  std::string look_for_file_in_subdirs(std::string fileWITHOUTpath,std::string dir);
  std::string look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir);
  bool look_for_string_in_vector(std::vector<std::string> vector_to_check,std::string item_to_find);
  void make_icon(Fl_Window *o);
  Fl_Double_Window* make_window();
  Fl_Double_Window *win;
  static unsigned char menu__i18n_done;
  static Fl_Menu_Item menu_[];
private:
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  inline void cb_Exit_i(Fl_Menu_*, void*);
  static void cb_Exit(Fl_Menu_*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Button *open_button;
private:
  inline void cb_open_button_i(Fl_Button*, void*);
  static void cb_open_button(Fl_Button*, void*);
public:
  Fl_Button *zoom_in_button;
private:
  inline void cb_zoom_in_button_i(Fl_Button*, void*);
  static void cb_zoom_in_button(Fl_Button*, void*);
public:
  Fl_Button *zoom_out_button;
private:
  inline void cb_zoom_out_button_i(Fl_Button*, void*);
  static void cb_zoom_out_button(Fl_Button*, void*);
public:
  bool program_is_running(std::string program_line);
  std::string remove_cruft(std::string StringInput, std::string CruftToRemove);
  int run_a_program_in_background(std::string program);
  int run(std::string program);
  static void* run_in_bg(void *userdata);
  std::string sed_i(std::string input, std::string remove, std::string replace);
  std::vector<std::string> sort_array(std::vector<std::string> vector_to_sort);
  bool test_dir(std::string dirToTest);
  bool test_exec(std::string execToTest);
  bool test_file(std::string fileWithFullPATH);
  std::string test_file_in_vector_path(std::string fileWithNOPATH,std::vector<std::string> directories_to_check);
  std::string term_out(std::string terminal_Command_You_Want_Output_From);
  void resizeImage(Fl_Widget * widget);
  void open_cb();
  bool right_cb();
  bool left_cb();
  bool view_image(std::string filename);
  int handle(int e);
  void zoom(bool out=false);
};
int main(int argc, char *argv[]);
void trace(std::string msg);
#endif
