// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "flimage.h"

int ImageBox::handle(int e) {
  static int offset[2] = { 0, 0 };
  UserInterface* ui = ((UserInterface*)(this->user_data()));
  //    UserInterface *ui = (UserInterface*)this->parent()->parent()->user_data();
  switch ( e )
  {
    case FL_DND_DRAG:
    trace("draaaaaag....");
      break;
    case FL_DND_LEAVE:
      break;
    case FL_DND_RELEASE:
      trace("dnd release");
      RELEASE=true;
      break;
    case FL_PASTE:
      trace("droppppppp'd");
      if(RELEASE)
      {
        RELEASE=false;
        ui->dnd_file(Fl::event_text());
        return 1;
      }
      break;
    case FL_PUSH:
      offset[0] = x() - Fl::event_x();    // save where user clicked for dragging
      offset[1] = y() - Fl::event_y();
      return(1);
    case FL_RELEASE:
      return 1;
    case FL_DRAG:
      position(offset[0]+Fl::event_x(), offset[1]+Fl::event_y());
      this->parent()->parent()->redraw();
      return 1;
    case FL_MOUSEWHEEL:
  
      if(Fl::event_dy( )>0)
      {
        //DOWN aka zoom out
        ui->zoom(true);
      }
      else if (Fl::event_dy( )<0)
      {
        ui->zoom();
      }
      break;
  }
  int ret = Fl_Box::handle(e);
  return(ret);
}

ImageBox::ImageBox(Fl_Boxtype b, int X, int Y, int W, int H, const char *l):Fl_Box(b,X,Y,W,H,l) {
  RELEASE=false;
  box(FL_FLAT_BOX);
  color(FL_DARK3);
}

void UserInterface::cb_Close_i(Fl_Button*, void*) {
  about_win->hide();
}
void UserInterface::cb_Close(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void UserInterface::cb_Open_i(Fl_Menu_*, void*) {
  open_cb();
}
void UserInterface::cb_Open(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void UserInterface::cb_Exit_i(Fl_Menu_*, void*) {
  exit(0);
}
void UserInterface::cb_Exit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

unsigned char UserInterface::menu__i18n_done = 0;
Fl_Menu_Item UserInterface::menu_[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open", 0,  (Fl_Callback*)UserInterface::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Exit", 0,  (Fl_Callback*)UserInterface::cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb__i(Fl_Button*, void*) {
  if(!left_cb())
{
  trace("Could not move left in:"+CURRENT_DIR+" based on:"+CURRENT_FILE);
};
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb__i(o,v);
}

void UserInterface::cb_1_i(Fl_Button*, void*) {
  if(!right_cb())
{
  trace("Could not move right in:"+CURRENT_DIR+" based on:"+CURRENT_FILE);
};
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_1_i(o,v);
}

void UserInterface::cb_open_button_i(Fl_Button*, void*) {
  open_cb();
}
void UserInterface::cb_open_button(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_open_button_i(o,v);
}

void UserInterface::cb_zoom_in_button_i(Fl_Button*, void*) {
  zoom();
}
void UserInterface::cb_zoom_in_button(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_zoom_in_button_i(o,v);
}

void UserInterface::cb_zoom_out_button_i(Fl_Button*, void*) {
  zoom(true);
}
void UserInterface::cb_zoom_out_button(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_zoom_out_button_i(o,v);
}

UserInterface::UserInterface() {
}

Fl_Double_Window* UserInterface::about_window() {
  { about_win = new Fl_Double_Window(388, 200, gettext("About"));
    about_win->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(320, 170, 65, 30, gettext("Close"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color(FL_DARK_RED);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(4, 4, 380, 160);
      o->box(FL_FLAT_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->align(Fl_Align(FL_ALIGN_CLIP));
      Fl_Group::current()->resizable(o);
      about_text(o);
    } // Fl_Box* o
    about_win->end();
  } // Fl_Double_Window* about_win
  return about_win;
}

void UserInterface::about_text(Fl_Widget* o) {
  std::string t="Libre Software Developed for ToriOS\n Copyright 2018 GPL3\nA simple FLTK image viewer";
  display_text(t,o);
}

void UserInterface::button_style(int style) {
  if(style==0)
  {
  open_button->image(open_image);
  //save_button->image(save_image);
  //new_button->image(new_image);
  //undo_button->image(undo_image);
  zoom_in_button->image(zoom_in);
  zoom_out_button->image(zoom_out);
  //replace_button->image(replace_image);
  //cp_button->image(copy_image);
  //p_button->image(paste_image);
  //cut_button->image(cut_image);
  }
  else
  {
  open_button->image(color_open_image);
  //save_button->image(color_save_image);
  //new_button->image(color_new_image);
  //undo_button->image(color_undo_image);
  zoom_in_button->image(color_zoom_in);
  zoom_out_button->image(color_zoom_out);
  //replace_button->image(color_replace_image);
  //cp_button->image(color_copy_image);
  //p_button->image(color_paste_image);
  //cut_button->image(color_cut_image);
  }
  
  open_button->redraw();
  //save_button->redraw();
  //new_button->redraw();
  //undo_button->redraw();
  zoom_in_button->redraw();
  zoom_out_button->redraw();
  //replace_button->redraw();
  //cp_button->redraw();
  //p_button->redraw();
  //cut_button->redraw();
}

void UserInterface::changeWidgetImage(std::string icon_file, Fl_Widget * widget) {
  if(icon_file.compare("")==0)
  {
    trace("changeWidgetImage::Image file is empty");
    return;
  }
  widget->align(FL_ALIGN_CENTER);
  widget->copy_label("");
  widget->image(NULL);
  widget->redraw();
  widget->label(0L);
  if(!test_file(icon_file))
  {
    trace("changeWidgetImage:: "+icon_file+" is not an Image");
    return;
  }
  if(icon_file.compare("")==0)
  {
    trace("changeWidgetImage::Image file is empty");
    return;
  }
  
  Fl_Image* image2=widget->image();//new Fl_Image(w,h,4);
  
  if(has_file_extention_at_end(icon_file,".png"))
  {
    Fl_Image* image = new Fl_PNG_Image(icon_file.c_str());
    image2 = image->copy();
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".xpm"))
  {
    Fl_Image* image = new Fl_XPM_Image(icon_file.c_str());
    image2 = image->copy();
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".xbm"))
  {
    Fl_Image* image = new Fl_XBM_Image(icon_file.c_str());
    image2 = image->copy();
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".svg"))
  {
    NSVGimage *svg_image = NULL;
    NSVGrasterizer *rast = NULL;
    unsigned char* img_data = NULL;
    int width;
    int height;
    const int depth = 4;
    svg_image = nsvgParseFromFile(icon_file.c_str(), "px", 96);
    if (svg_image == NULL)
    {
      trace("changeWidgetImage::Could not open SVG image:"+icon_file);
      return;
    }
    width = (int)svg_image->width;
    height = (int)svg_image->height;
    rast = nsvgCreateRasterizer();
    if (rast == NULL)
    {
      trace("changeWidgetImage::Could not init rasterizer.");
      return;
    }
    img_data = (unsigned char*)malloc(width * height * depth);
    if (img_data == NULL)
    {
      trace("changeWidgetImage::Could not alloc image buffer.\n");
      return;
    }
    nsvgRasterize(rast, svg_image, 0, 0, 1, img_data, width, height, (width * depth));
    Fl_Image* image  = new Fl_RGB_Image(img_data, width, height, 4);
    image2 = image->copy();
    delete(image);
    nsvgDeleteRasterizer(rast);
    nsvgDelete(svg_image);
  }
  else if((has_file_extention_at_end(icon_file,".jpg"))||
  (has_file_extention_at_end(icon_file,".jpeg"))||
  (has_file_extention_at_end(icon_file,".face")))
  {
    Fl_Image* image = new Fl_JPEG_Image(icon_file.c_str());
    image2 = image->copy();
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".gif"))
  {
    Fl_Image* image = new Fl_GIF_Image(icon_file.c_str());
    image2 = image->copy();
    delete(image);
  }
  else{return;}
  widget->show();
  //double A = (image2->h()*image2->w());
  //double newW = sqrt(A*(win->w()/win->h()));
  //double newH = A/newW;
  int newW2 = image2->w();//(int)(newW+0.5);
  int newH2 = image2->h();// (int)(newH+0.5);
  //std::cout<<"w="<<newW2<<":"<<newW<<"\nH="<<newH2<<"::"<<newH<<std::endl;
  
  widget->size(newW2,newH2);
  widget->image(image2->copy());
  delete(image2);
  win->redraw();
  //resizeImage(widget);
}

std::vector<std::string> UserInterface::comma_vector(std::string LINE,std::vector<std::string> Vector) {
  std::string original,preComma,postComma;
  original=LINE;
  unsigned int found,finder;
  finder=original.length();
  for(found=original.find(",");found<finder;found=original.find(",")){
    preComma=original;
    postComma=original;
    preComma=preComma.erase(found,std::string::npos);
    if(preComma.compare("")!=0){Vector.push_back(preComma);}
    postComma=postComma.erase(0,found+1);
    original=postComma;
    finder=original.length();
  }
  if(postComma.compare("")!=0){Vector.push_back(postComma);}
  return Vector;
}

std::string UserInterface::convert_num_to_string(int num) {
  std::string number;
  std::stringstream out;
  out << num;
  number = out.str();
  return number;
}

unsigned int UserInterface::convert_string_to_number(std::string num) {
  if(num.compare("")==0){return 0;}
  std::stringstream out;
  out << num;
  unsigned int integer;
  out >> integer;
  return integer;
}

std::string UserInterface::current_path(int whichPath) {
  unsigned int lastPath = 0;
  std::string result;
  if (whichPath >=1){lastPath = whichPath - 1;}
  else {lastPath = 0;}
  const char* path =getenv("PATH");
  std::string stringPATH;
  if(path == NULL){stringPATH = "/usr/bin";}
  else{stringPATH = path;}
  std::string::size_type firstPosition = stringPATH.find(':');
  if(firstPosition>stringPATH.length()){return stringPATH.c_str();}   
  std::string::size_type position = firstPosition;
  for (int i=1;i<=whichPath;i++){position = stringPATH.find(':',position+1);}
  for (unsigned int j=1;j<=lastPath;j++){firstPosition = stringPATH.find(':',firstPosition+1);}
  result = stringPATH.substr (firstPosition+1,((position-firstPosition)-1));
  return result;
}

std::vector<std::string> UserInterface::delimiter_vector_from_string(std::string string_to_become_vector,std::string delimiter) {
  std::vector<std::string> Vector;
  std::string original,preComma,postComma;
  original=string_to_become_vector;
  unsigned int found,finder;
  finder=original.length();
  if(original.find(delimiter)>original.length()){
    Vector.push_back(original);
    return Vector;
  }
  for(found=original.find(delimiter);found<finder;found=original.find(delimiter)){
    preComma=original;
    postComma=original;
    preComma=preComma.erase(found,std::string::npos);
    if(preComma.compare("")!=0){Vector.push_back(preComma);}
    postComma=postComma.erase(0,found+1);
    original=postComma;
    finder=original.length();
  }
  if(postComma.compare("")!=0){Vector.push_back(postComma);}
  return Vector;
}

std::vector<std::string> UserInterface::desktop_dirs() {
  std::string envVar ="XDG_DATA_DIRS";
  std::string incasenothingexists="/usr/local/share/:/usr/share/";
  std::vector<std::string> thisPath;
  std::vector<std::string>::iterator it;
  std::string thisXDG;
  const char* datadirs=getenv(envVar.c_str());
  if (datadirs == NULL)
  {
    thisXDG=incasenothingexists;
  }
  else
  {
    thisXDG=datadirs;
  }
  unsigned int numberOfPaths;
  std::string tempXDG = thisXDG;
  unsigned int tryer=0;
  unsigned int xdgLen=0;
  xdgLen=thisXDG.length();
  for (numberOfPaths=0;tryer<xdgLen;)
  {
    tryer = tempXDG.find(":");
    tempXDG=tempXDG.erase(0,tryer+1);
    xdgLen=tempXDG.length();
    numberOfPaths++;
  }
  unsigned int lastPath = 0;
  std::string result;
  for (unsigned int whichPath=1;whichPath<=numberOfPaths;whichPath++)
  {
    if (whichPath >=1){lastPath = whichPath - 1;}
    else {lastPath = 0;}
    std::string::size_type firstPosition = thisXDG.find_first_of(':');
    std::string::size_type position = thisXDG.find(':');
    for (unsigned int i=1;i<=whichPath;i++){position = thisXDG.find(':',position+1);}
    for (unsigned int j=1;j<=lastPath;j++){firstPosition = thisXDG.find(':',firstPosition+1);}
    result = thisXDG.substr (firstPosition+1,((position-firstPosition)-1));
    thisPath.push_back(result);    
  }
  std::sort (thisPath.begin(), thisPath.end());
  it = std::unique (thisPath.begin(), thisPath.end());
  thisPath.resize( std::distance(thisPath.begin(),it) );
  return thisPath;
}

void UserInterface::display_text(std::string text, Fl_Widget *o) {
  o->copy_label(text.c_str());
  o->redraw();
}

std::string UserInterface::file_to_string(std::string filename) {
  if(filename.compare("")==0){return "";}
  /** make sure it is actually a file */
  if(!test_file(filename)){trace("No file sent in: "+filename);}
  std::string thisLine;
  std::string fullString;
  std::ifstream inputFileStream(filename.c_str(), std::ifstream::in);
  if(inputFileStream.is_open())
  {
    while (getline(inputFileStream,thisLine))
    {
      if(fullString.compare("")==0){fullString=thisLine;}
      else{fullString=fullString+"\n"+thisLine;}
    }
  }
  return fullString;
}

std::string UserInterface::find_xdg_data_dir_subdir(std::string subdir) {
  std::vector<std::string> xdgDataDirs = desktop_dirs();
  std::string dirToOpen;
  for( std::vector<std::string>::iterator it = xdgDataDirs.begin();
  it!=xdgDataDirs.end();
  ++it)
  {
    dirToOpen=*it;
    unsigned int finder=dirToOpen.rfind('/');
    if(finder+1==dirToOpen.length()){dirToOpen+=subdir;}
    else
    {
      dirToOpen+="/";
      dirToOpen+=subdir;
    }
    if(test_dir(dirToOpen))
    {
      if(finder+1==dirToOpen.length()){return dirToOpen;}
      else
      {
        dirToOpen+="/";
        return dirToOpen;
      }
    }
    else{trace(dirToOpen+" does not exist");}
  }
  return "";
}

std::string UserInterface::get_directory_from_filename(std::string input) {
  std::string filename = input;
  unsigned int finder=filename.rfind("/");
  if(finder<filename.length())
  {
    filename=filename.erase(finder+1,std::string::npos);
  }
  else{return "";} /**return empty if there is no directory*/
  return filename;
}

std::string UserInterface::get_equal_value(std::string INTERNAL_LINE) {
  std::string subString;
  unsigned int found =INTERNAL_LINE.find("=");
  if(found < INTERNAL_LINE.length())
  {
   subString=INTERNAL_LINE.substr(found+1,std::string::npos);
   return subString;
  }
  return "";
}

std::vector<std::string> UserInterface::get_file_vector(std::string DIRECTORY,std::string file) {
  std::vector<std::string> myVector;
  if(!test_dir(DIRECTORY)){return myVector;}
  if(DIRECTORY.compare("")==0){return myVector;}
  if(file.compare("")==0){return myVector;}
  DIR *mydir=NULL;
  struct dirent *entryPointer=NULL;
  mydir=opendir(DIRECTORY.c_str());
  if(DIRECTORY.rfind('/')!=DIRECTORY.length()-1){DIRECTORY+="/";}
  if(mydir!=NULL)
  {
    while ((entryPointer=readdir(mydir))!=NULL)
    {
      if((entryPointer->d_type == DT_REG)&&(entryPointer->d_name[0]!='.'))
      {
        std::string fullpath=entryPointer->d_name;
        fullpath=DIRECTORY+fullpath;
        unsigned int findIT = fullpath.find(file);
        if(findIT<=fullpath.length()){myVector.push_back(fullpath);}
  
      }
      if((entryPointer->d_type==DT_DIR)&&(entryPointer->d_name[0]!='.'))
      {
        std::string fullpath=entryPointer->d_name;
        fullpath=DIRECTORY+fullpath;
        if(fullpath.rfind('/')!=fullpath.length()-1){fullpath+="/";}
        std::string thisAnswer=look_for_file_in_subdirs(file,fullpath);
        if(thisAnswer.compare("")!=0)
        {
          std::string temp=fullpath+file;
          myVector.push_back(temp);
        }
      }
    }
  }
  myVector=sort_array(myVector);
  return myVector;
}

unsigned int UserInterface::get_fl_color(XColor *c) {
  int red = (int)c->red>>8;
  int green = (int)c->green>>8;
  int blue = (int)c->blue>>8;
  //std::cout<<"r="<<red<<" g="<<green<<" b="<<blue<<std::endl;
  char tmp[8];
  std::snprintf(tmp, sizeof(tmp), "%02x%02x%02x", red, green, blue);
  std::string output = tmp;
  output="0x"+output+"00";
  return strtoul(output.c_str(),0,16);
}

std::string UserInterface::get_line_with_delim(std::string filename, std::string line,std::string delim) {
  if(line.compare("")==0){return "";}
  if(filename.compare("")==0){return "";}
  if(!test_file(filename)){trace("get_line_with_delim::No file sent in\n"+filename+","+line);}
  std::string thisLine;
  std::string subString;
  std::ifstream inputFileStream(filename.c_str(), std::ifstream::in);
  std::string hash="#";
  std::string itemToFind=line+delim;
  unsigned int len=itemToFind.length();
  if(inputFileStream.is_open())
  {
    while (getline(inputFileStream,thisLine))
    {
      if(thisLine.find(hash)<=1){}
      else
      {
        unsigned int found=thisLine.find(itemToFind);
        if(found<thisLine.length())
        {
          found+=len;
          subString=thisLine.substr(found,std::string::npos);
          return subString;
        }
      }
    }
  }
  return "";
}

std::string UserInterface::get_line_with_equal(std::string filename, std::string line) {
  return get_line_with_delim(filename,line,"=");
}

int UserInterface::getProcIdByName(std::string procName) {
  int pid = -1;
  if(procName.compare("")==0){return -1;}
  // Open the /proc directory
  DIR *dp = opendir("/proc");
  if (dp != NULL)
  {
    // Enumerate all entries in directory until process found
    struct dirent *dirp;
    while (pid < 0 && (dirp = readdir(dp)))
    {
    // Skip non-numeric entries
      int id = atoi(dirp->d_name);
      if (id > 0)
      {
    // Read contents of virtual /proc/{pid}/cmdline file
        std::string cmdPath = std::string("/proc/") + dirp->d_name + "/cmdline";
        std::ifstream cmdFile(cmdPath.c_str());
        std::string cmdLine;
        getline(cmdFile, cmdLine);
        if (!cmdLine.empty())
        {
      // Keep first cmdline item which contains the program path
          size_t pos = cmdLine.find('\0');
          if (pos != std::string::npos){cmdLine = cmdLine.substr(0, pos);}
      // Keep program name only, removing the path
          pos = cmdLine.rfind('/');
          if (pos != std::string::npos){cmdLine = cmdLine.substr(pos + 1);}
      // Compare against requested process name
          if (procName == cmdLine){pid = id;}
        }
      }
    }
  }
  closedir(dp);
  std::cout<<"Process Name="<<procName<<" pid="<<pid<<std::endl;
  return pid;
}

std::string UserInterface::get_shell_for_C() {
  std::string shell=term_out("which bash");
  if(shell.compare("")==0){
    if(!test_exec(shell)){
    shell=term_out("which sh");
    if(!test_exec(shell)){return "";}
    //TODO make this work for others
    }
  }
  shell=shell+" -c '";
  return shell;
}

std::string UserInterface::get_symlinkpath(std::string symlink) {
  struct stat statinfo;
  if((lstat(symlink.c_str(), &statinfo)>0)){return symlink;}
  if ((!S_ISLNK (statinfo.st_mode) && statinfo.st_nlink > 1)||(S_ISLNK (statinfo.st_mode)))
  {
    std::vector<char> buf(400);
    size_t len;
    do
    {
      buf.resize(buf.size() + 100);
      len = ::readlink(symlink.c_str(), &(buf[0]), buf.size());
    }
    while(buf.size() == len);
    if (len > 0)
    {
      buf[len] = '\0';
      return (std::string(&(buf[0])));
    }
  }
  else
  {
    return symlink;
  }
  return symlink;
}

bool UserInterface::has_file_extention_at_end(std::string filename,std::string extention) {
  std::string extention_check;
  std::transform(filename.begin(), filename.end(), filename.begin(), ::tolower);
  std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  unsigned int found=filename.find(extention);
  unsigned int ext_len=extention.length();
  unsigned int file_len=filename.length();
  if(found<file_len)
  {
    if(found==(file_len-ext_len))
    {
      return true;
    }
  }
  return false;
}

unsigned int UserInterface::items_in_path() {
  const char* path =getenv("PATH");
  std::string::size_type pathPosition =0;
  if(path==NULL){return 1;}
  std::string stringPATH = path;
  unsigned int howmany;
  for(howmany=1;(pathPosition!=std::string::npos);howmany++)
  {
    pathPosition=stringPATH.find(':', pathPosition+1);
  }
  return howmany;
}

std::vector<std::string> UserInterface::join_string_vectors(std::vector<std::string> vectorA,std::vector<std::string> vectorB) {
  std::vector<std::string> bothVectors;
  bothVectors.reserve(vectorA.size()+vectorB.size());
  bothVectors.insert(bothVectors.end(),vectorA.begin(),vectorA.end());
  bothVectors.insert(bothVectors.end(),vectorB.begin(),vectorB.end());
  return bothVectors;
}

void UserInterface::load_file(std::string filename, Fl_Widget *o) {
  if( (filename.compare("")==0) || (!test_file(filename)) )
    return;
  display_text(file_to_string(filename),o);
}

std::string UserInterface::look_for_file_in_subdirs(std::string fileWITHOUTpath,std::string dir) {
  if((dir.compare("")==0)
  ||(fileWITHOUTpath.compare("")==0))
    return "";
  
  /** if it is not a directory return empty */
  if(!test_dir(dir))
    return "";
  
  /** remove the preceding path*/
  unsigned int found=fileWITHOUTpath.rfind('/');
  if(found<fileWITHOUTpath.length())
  {
    unsigned int len=fileWITHOUTpath.length()-found;
    fileWITHOUTpath=fileWITHOUTpath.erase(0,len);
  }
  
  std::string ANSWERS;
  DIR *mydir=NULL;
  struct dirent *entryPointer=NULL;
  mydir=opendir(dir.c_str());
  
  /** open the directory */
  if(mydir!=NULL){
    while ((entryPointer=readdir(mydir))!=NULL)
    {
    /** find out if it is a symlink or regular file that is not hidden*/
      if(((entryPointer->d_type == DT_LNK)
      ||(entryPointer->d_type == DT_REG))
      &&(entryPointer->d_name[0]!='.'))
      {
        std::string fullpath=entryPointer->d_name;
        if(dir.rfind('/')!=dir.length()-1){dir+="/";}
        fullpath=dir+fullpath;
        unsigned int findIT = fullpath.find(fileWITHOUTpath);
        if(findIT<=fullpath.length())
        {
      /** add a comma at the end if there isn't one already*/
          if(ANSWERS.rfind(",")!=ANSWERS.length()-1)ANSWERS+=",";
          ANSWERS+=fullpath;
        }
      }
      /** find out if it is a directory that is not hidden*/
      if((entryPointer->d_type==DT_DIR)
      &&(entryPointer->d_name[0]!='.'))
      {
        std::string fullpath=entryPointer->d_name;
        if(dir.rfind('/')!=dir.length()-1){dir+="/";}
        fullpath=dir+fullpath;
        std::string thisAnswer=look_for_file_in_subdirs(fileWITHOUTpath,fullpath);
        if(thisAnswer.compare("")!=0)
        {
          if(ANSWERS.rfind(",")!=ANSWERS.length()-1)
          {
            ANSWERS+=",";
          }
          ANSWERS+=thisAnswer;
        }
      }
    }
  }
  closedir(mydir);
  if(ANSWERS.compare("")!=0)
  {
    return ANSWERS;
  }
  return "";
}

std::string UserInterface::look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir) {
  if((dir.compare("")==0)
  ||(fileWITHOUTpath.compare("")==0))
  {
    trace("std::string look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir) requires non empty variables to work\nMUST EXIT");
    return "";
  }
  if(!test_dir(dir))
  {
    trace("look_for_first_file_in_subdirs::"+dir+" is not a directory\nMUST EXIT");
    return "";
  }
  unsigned int found=fileWITHOUTpath.rfind('/');
  if(found<fileWITHOUTpath.length())
  {
    unsigned int len=fileWITHOUTpath.length()-found;
    fileWITHOUTpath=fileWITHOUTpath.erase(0,len);
  }
  std::string ANSWERS;
  DIR *mydir=NULL;
  struct dirent *entryPointer=NULL;
  mydir=opendir(dir.c_str());
  std::string finalAnswer;
  if(mydir!=NULL)
  {
    while ((entryPointer=readdir(mydir))!=NULL)
    {
      std::string fullpath=entryPointer->d_name;
      if(dir.rfind('/')!=dir.length()-1){dir+="/";}
      fullpath=dir+fullpath;
    /** if it is a symlink or file check it */
      if(((entryPointer->d_type == DT_LNK)
        ||(entryPointer->d_type == DT_REG))
        &&(entryPointer->d_name[0]!='.'))
      {
        std::string tempFINDER="/"+fileWITHOUTpath;
        trace("look_for_first_file_in_subdirs::FINDER:"+tempFINDER+"\nfullpath="+fullpath);
        unsigned int findIT = fullpath.find(tempFINDER);
        if(findIT<=fullpath.length())
        {
          if(entryPointer->d_type == DT_LNK)
          {
      /** if it is a symlink get the actual file */
            std::string temporary=get_symlinkpath(fullpath);
            trace("look_for_first_file_in_subdirs::SYMLINK="+fullpath+"\nFile="+temporary);
            if(temporary.compare("")!=0)
            {
              closedir(mydir);
              if(temporary.find("/")>temporary.length()){temporary=dir+temporary;}
              trace("look_for_first_file_in_subdirs::Symlink="+temporary);
              finalAnswer=temporary;
              return temporary;
            }
          }
          else
          {
            closedir(mydir);
            finalAnswer=fullpath;
            return fullpath;
          }
        }
      }
    /** if it is a directory look inside recursively */
      if((entryPointer->d_type==DT_DIR)
       &&(entryPointer->d_name[0]!='.'))
      {
        std::string thisAnswer=look_for_first_file_in_subdirs(fileWITHOUTpath,fullpath);
        if(thisAnswer.compare("")!=0)
        {
          if(test_file(thisAnswer))
          {
            closedir(mydir);
            finalAnswer=thisAnswer;
            return thisAnswer;
          }
        }
      }
    }
    closedir(mydir);
  }
  else{trace("look_for_first_file_in_subdirs::"+dir+" cannot be opened\nMUST EXIT");}
  trace("look_for_first_file_in_subdirs::Final Answer="+finalAnswer);
  return finalAnswer;
}

bool UserInterface::look_for_string_in_vector(std::vector<std::string> vector_to_check,std::string item_to_find) {
  for( std::vector<std::string>::iterator it = vector_to_check.begin();
  it!=vector_to_check.end();
  ++it){
    std::string tmp=*it;
    if(tmp.compare(item_to_find)==0){return true;}
  }
  return false;
}

void UserInterface::make_icon(Fl_Window *o) {
  Fl_Pixmap f(flimage_xpm);
  const Fl_Pixmap * flpad_xpm_icon = &f;
  const Fl_RGB_Image *img = new Fl_RGB_Image(flpad_xpm_icon,FL_GRAY);
  o->icon(img);
}

Fl_Double_Window* UserInterface::make_window() {
  { Fl_Double_Window* o = win = new Fl_Double_Window(385, 375, gettext("Image Viewer"));
    win->user_data((void*)(this));
    win->when(3);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 385, 25);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)38);
      o->selection_color((Fl_Color)80);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->textcolor(FL_BACKGROUND2_COLOR);
      if (!menu__i18n_done) {
        int i=0;
        for ( ; i<3; i++)
          if (menu_[i].label())
            menu_[i].label(gettext(menu_[i].label()));
        menu__i18n_done = 1;
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Button* o = new Fl_Button(325, 27, 25, 25, gettext("@<"));
      o->tooltip(gettext("Press \',\' to use this"));
      o->box(FL_FLAT_BOX);
      o->shortcut(0x2c);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(355, 27, 25, 25, gettext("@>"));
      o->tooltip(gettext("Press \'.\' to use this"));
      o->box(FL_FLAT_BOX);
      o->shortcut(0x2e);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_1);
    } // Fl_Button* o
    { open_button = new Fl_Button(5, 27, 25, 25);
      open_button->box(FL_FLAT_BOX);
      open_button->color((Fl_Color)23);
      open_button->callback((Fl_Callback*)cb_open_button);
    } // Fl_Button* open_button
    { zoom_in_button = new Fl_Button(85, 27, 25, 25);
      zoom_in_button->box(FL_FLAT_BOX);
      zoom_in_button->shortcut(0x3d);
      zoom_in_button->color((Fl_Color)23);
      zoom_in_button->callback((Fl_Callback*)cb_zoom_in_button);
    } // Fl_Button* zoom_in_button
    { zoom_out_button = new Fl_Button(115, 27, 25, 25);
      zoom_out_button->box(FL_FLAT_BOX);
      zoom_out_button->shortcut(0x2d);
      zoom_out_button->color((Fl_Color)23);
      zoom_out_button->labelfont(1);
      zoom_out_button->labelsize(30);
      zoom_out_button->callback((Fl_Callback*)cb_zoom_out_button);
      button_style(1);
    } // Fl_Button* zoom_out_button
    { Fl_Scroll* o = new Fl_Scroll(0, 55, 385, 320);
      viewer = new ImageBox();
      viewer->user_data(win->user_data());
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Scroll* o
    make_icon(o);
    win->xclass("flimage");
    win->end();
  } // Fl_Double_Window* win
  return win;
}

bool UserInterface::program_is_running(std::string program_line) {
  if(program_line.compare("")==0){return false;}
  int pid=getProcIdByName(program_line);
  if(pid>0){return true;}
  std::string pgrepProg=term_out("which pgrep");
  if(pgrepProg.compare("")==0)
  {
    //TODO: make a way for this to still check...
    return false;
  }
    //std::cout<<"pgrep is "+pgrepProg<<std::endl;
  std::string shell=get_shell_for_C();
  if(shell.compare("")==0)return false;
    //std::cout<<"Using shell command="+shell<<std::endl;
  std::string processline=program_line;
  std::string pgrep = shell + " "+pgrepProg+" "+program_line+ "'";
    //std::cout<<"Total command to run:\n"+pgrep<<std::endl;
  std::string returnVal=term_out(pgrep);
  if(returnVal.compare("")==0){return false;}
  return true;
}

std::string UserInterface::remove_cruft(std::string StringInput, std::string CruftToRemove) {
  if((StringInput.compare("")==0)||(CruftToRemove.compare("")==0)){return StringInput;}
  unsigned int found=0;
  unsigned int cruftLength=CruftToRemove.length();
  found=StringInput.find(CruftToRemove);
  if(found>StringInput.length()){return StringInput;}
  std::string temp=StringInput;
  temp=temp.erase(0,found+cruftLength);
  if(temp.compare("")!=0){return temp;}
  std::string temp2=StringInput;
  temp2=temp2.erase(found,std::string::npos);
  if(temp2.compare("")!=0){return temp2;}
  trace("remove_cruft::There was a problem removing the cruft.... Giving you back your string");
  return StringInput;
}

int UserInterface::run_a_program_in_background(std::string program) {
  std::string shell=get_shell_for_C();
  program += " &disown";
  if(shell.compare("")!=0){
    shell+=program;
    shell+="'";
  }
  else{shell=program;}
  trace("run_program_in_background::"+shell);
  return system(shell.c_str());
}

int UserInterface::run(std::string program) {
  std::string shell=get_shell_for_C();
  if(shell.compare("")!=0)
  {
    shell+=program;
    shell+="'";
  }
  else{shell=program;}
  trace("run_program::"+shell);
  return system(shell.c_str());
}

void* UserInterface::run_in_bg(void *userdata) {
  while(true){
  printf("Hello, World!\n");
  }
}

std::string UserInterface::sed_i(std::string input, std::string remove, std::string replace) {
  unsigned int xmlfix=0;
  unsigned int oldFind=0;
  unsigned int length=input.length();
  unsigned int removeLength=remove.length();
  std::string modinput=input;
  while(modinput.find(remove,oldFind)<length)
  {
    xmlfix = modinput.find(remove,oldFind);
    oldFind=xmlfix+replace.length();
    std::string tempPRE,tempPOST,temp;
    if(xmlfix<length)
    {
      temp=modinput;
      tempPOST=modinput;
      tempPRE = temp.erase(xmlfix,std::string::npos);
      tempPOST = modinput.erase(0,xmlfix+removeLength);
      modinput = tempPRE + replace + tempPOST;
      length=modinput.length();
    }
  }
  return modinput;
}

std::vector<std::string> UserInterface::sort_array(std::vector<std::string> vector_to_sort) {
  std::vector<std::string>::iterator it;
  std::sort (vector_to_sort.begin(), vector_to_sort.end());
  it = std::unique (vector_to_sort.begin(), vector_to_sort.end());
  vector_to_sort.resize( std::distance(vector_to_sort.begin(),it) );
  return vector_to_sort;
}

bool UserInterface::test_dir(std::string dirToTest) {
  if(dirToTest.compare("")==0){return false;}
  DIR *dir = NULL;
  dir = opendir(dirToTest.c_str());
  if (dir!=NULL)
  {
    closedir(dir);
    return true;
  }
  return false;
}

bool UserInterface::test_exec(std::string execToTest) {
  if(execToTest.compare("")==0){return false;}
  /** the list of directories it might check*/
  /** /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games*/
  std::string stringEXEC;
  std:: string testPATH, testExec;
  bool result = false;
  unsigned int numofpaths = items_in_path();
  for (unsigned int i = 1; i <= numofpaths; i++)
  {
    stringEXEC = execToTest;
    testPATH = current_path(i);
    stringEXEC = testPATH + "/" + stringEXEC;
    if(test_file(stringEXEC.c_str())){return true;}
  }
  return result;
}

bool UserInterface::test_file(std::string fileWithFullPATH) {
  if(fileWithFullPATH.compare("")==0){return false;}
  std::string dir=get_directory_from_filename(fileWithFullPATH);
  if(dir.compare("")==0){return false;}
  DIR *mydir=NULL;
  struct dirent *entryPointer=NULL;
  mydir=opendir(dir.c_str());
  if(mydir!=NULL)
  {
    while ((entryPointer=readdir(mydir))!=NULL)
    {
      if(entryPointer->d_type == DT_REG)
      {
        std::string fullpath=entryPointer->d_name;
        if(dir.rfind('/')!=dir.length()-1){dir+="/";}
        fullpath=dir+fullpath;
        if(fullpath.compare(fileWithFullPATH)==0)
        {
          closedir(mydir);
          return true;
        }
      }
    }
    closedir(mydir);
  }
  else{trace("could not open directory to search for "+fileWithFullPATH);}
  return false;
}

std::string UserInterface::test_file_in_vector_path(std::string fileWithNOPATH,std::vector<std::string> directories_to_check) {
  if(fileWithNOPATH.compare("")==0){return "";}
  std::string filePathRemoved=fileWithNOPATH;
  unsigned int found=filePathRemoved.rfind('/');
  trace("test_file_in_vector_path::Looking for:"+fileWithNOPATH);
  if(found<filePathRemoved.length())
  {
    unsigned int len=filePathRemoved.length()-found;
    filePathRemoved=filePathRemoved.erase(0,len);
  }
  for( std::vector<std::string>::iterator it = directories_to_check.begin();
    it!=directories_to_check.end();
    ++it)
  {
    std::string dirToOpen=*it;
    std::string result=dirToOpen;
    unsigned int finder=dirToOpen.rfind('/');
    if(finder+1==dirToOpen.length()){result+=filePathRemoved;}
    else
    {
      result+="/";
      result+=filePathRemoved;
    }
    if(test_file(result))
    {
      trace("test_file_in_vector_path::FOUND="+result);
      return result;
    }
    else
    {
      std::string tmp=result;
      tmp=get_symlinkpath(tmp);
      if(tmp.compare("")!=0){return test_file_in_vector_path(tmp,directories_to_check);}
    }
  }
  return "";
}

std::string UserInterface::term_out(std::string terminal_Command_You_Want_Output_From) {
  if(terminal_Command_You_Want_Output_From.compare("")==0){return "";}
  /** set a locale so this works well */
  const char* LANG=getenv("LANG");
  std::string LOCALE;
  if(LANG==NULL)
  {
    LANG=getenv("LANGUAGE");
    if(LANG!=NULL){
    std::string tmp=LANG;
    unsigned int find=tmp.find(".UTF-8");
    if(find>tmp.length()){tmp+=".UTF-8";}
    LOCALE=tmp;
    }
  }
  else
  {
    LOCALE=LANG;
  }
  if(LOCALE.compare("")!=0){setlocale(LC_ALL, LOCALE.c_str());}
  std::string result="";
  const int max_buffer = 1024;
  char buffer[max_buffer];
  FILE *command_p = popen(terminal_Command_You_Want_Output_From.c_str(), "r");
  if (command_p)
  {
    while( fgets(buffer, sizeof(buffer), command_p) !=NULL){result.append(buffer);}
    pclose(command_p);
  }
  else{ return "";}
  if (result.compare("")==0){return "";}
  int end = result.length();
  if((end-1) == 0){return "";}
  if((end) == 0){return "";}
  return result.erase(end-1,1);
}

void UserInterface::resizeImage(Fl_Widget * widget) {
  std::string icon_file=CURRENT_DIR+CURRENT_FILE;
  if(icon_file.compare("")==0)
  {
    trace("changeWidgetImage::Image file is empty");
    return;
  }
  widget->align(FL_ALIGN_CENTER);
  widget->copy_label("");
  widget->image(NULL);
  widget->redraw();
  widget->label(0L);
  int w=widget->w();
  int h=widget->h();
  if(!test_file(icon_file))
  {
    trace("changeWidgetImage:: "+icon_file+" is not an Image");
    return;
  }
  if(icon_file.compare("")==0)
  {
    trace("changeWidgetImage::Image file is empty");
    return;
  }
  
  Fl_Image* image2=widget->image();//new Fl_Image(w,h,4);
  
  if(has_file_extention_at_end(icon_file,".png"))
  {
    Fl_Image* image = new Fl_PNG_Image(icon_file.c_str());
    image2 = image->copy(w,h);
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".xpm"))
  {
    Fl_Image* image = new Fl_XPM_Image(icon_file.c_str());
    image2 = image->copy(w,h);
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".xbm"))
  {
    Fl_Image* image = new Fl_XBM_Image(icon_file.c_str());
    image2 = image->copy(w,h);
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".svg"))
  {
    NSVGimage *svg_image = NULL;
    NSVGrasterizer *rast = NULL;
    unsigned char* img_data = NULL;
    int width;
    int height;
    const int depth = 4;
    svg_image = nsvgParseFromFile(icon_file.c_str(), "px", 96);
    if (svg_image == NULL)
    {
      trace("changeWidgetImage::Could not open SVG image:"+icon_file);
      return;
    }
    width = (int)svg_image->width;
    height = (int)svg_image->height;
    rast = nsvgCreateRasterizer();
    if (rast == NULL)
    {
      trace("changeWidgetImage::Could not init rasterizer.");
      return;
    }
    img_data = (unsigned char*)malloc(width * height * depth);
    if (img_data == NULL)
    {
      trace("changeWidgetImage::Could not alloc image buffer.\n");
      return;
    }
    nsvgRasterize(rast, svg_image, 0, 0, 1, img_data, width, height, (width * depth));
    Fl_Image* image  = new Fl_RGB_Image(img_data, width, height, 4);
    image2 = image->copy(w,h);
    delete(image);
    nsvgDeleteRasterizer(rast);
    nsvgDelete(svg_image);
  }
  else if((has_file_extention_at_end(icon_file,".jpg"))||
  (has_file_extention_at_end(icon_file,".jpeg"))||
  (has_file_extention_at_end(icon_file,".face")))
  {
    Fl_Image* image = new Fl_JPEG_Image(icon_file.c_str());
    image2 = image->copy(w,h);
    delete(image);
  }
  else if(has_file_extention_at_end(icon_file,".gif"))
  {
    Fl_Image* image = new Fl_GIF_Image(icon_file.c_str());
    image2 = image->copy(w,h);
    delete(image);
  }
  else{return;}
  widget->size(image2->w(),image2->h());
  widget->image(image2->copy());
  delete(image2);
  widget->show();
  win->redraw();
}

void UserInterface::open_cb() {
  const char* home=getenv("HOME");
  std::string DIR=home;
  if(home==NULL)
  {
    DIR="/tmp";
  }
  else
  {
    std::string tmp = DIR;
    tmp+="/Pictures";
    if(test_dir(tmp))
      DIR=tmp;
  }
  char *newfile = fl_file_chooser("Open", "*.{jpg,jpeg,png,gif,bmp,svg,xbm,xpm}", DIR.c_str(),0);
  if (newfile != NULL)
  {
    std::string tmp = newfile;
    view_image(tmp);  
  }
}

bool UserInterface::right_cb() {
  if(CURRENT_DIR.compare("")==0)
    return false;
  if(CURRENT_FILE.compare("")==0)
    return false;
  
  bool NEXT=false;
  DIR *mydir=NULL;
  struct dirent *entryPointer=NULL;
  mydir=opendir(CURRENT_DIR.c_str());
  if(mydir!=NULL)
  {
    while ((entryPointer=readdir(mydir))!=NULL)
    {
      if(entryPointer->d_type == DT_REG)
      {
        std::string fullpath=entryPointer->d_name;
        fullpath=CURRENT_DIR+fullpath;
        if(NEXT)
        {
          return view_image(fullpath);
        }
        if(fullpath.compare(CURRENT_FILE)==0)
        {
          NEXT=true;
        }
        else
        {
          std::string tmp = CURRENT_DIR + CURRENT_FILE;
          if(fullpath.compare(tmp)==0)
          {
            NEXT=true;
          }
  
        }
      }
    }
  }
  return false;
}

bool UserInterface::left_cb() {
  if(CURRENT_DIR.compare("")==0)
    return false;
  if(CURRENT_FILE.compare("")==0)
    return false;
  
  std::string previous;
  DIR *mydir=NULL;
  struct dirent *entryPointer=NULL;
  mydir=opendir(CURRENT_DIR.c_str());
  if(mydir!=NULL)
  {
    while ((entryPointer=readdir(mydir))!=NULL)
    {
      if(entryPointer->d_type == DT_REG)
      {
        std::string fullpath=entryPointer->d_name;
        fullpath=CURRENT_DIR+fullpath;
        if(fullpath.compare(CURRENT_FILE)==0)
        {
          return view_image(previous);
        }
        else
        {
          std::string tmp = CURRENT_DIR + CURRENT_FILE;
          if(fullpath.compare(tmp)==0)
          {
             return view_image(previous);
          }
        }
  
        previous=fullpath;
      }
    }
  }
  return false;
}

bool UserInterface::view_image(std::string filename) {
  if(filename.compare("")==0)
    return false;
  CURRENT_FILE=filename;
  CURRENT_DIR=get_directory_from_filename(filename);
  viewer->position(0, 55);
  changeWidgetImage(CURRENT_FILE,viewer);
  unsigned int finder=filename.rfind("/");
  if(finder<filename.length())
  {
    filename=CURRENT_FILE.erase(0,finder+1);
  }
  win->label(filename.c_str());
  return true;
}

int UserInterface::handle(int e) {
  switch(e)
  {
    case FL_Up:
    case FL_Right:
      right_cb();
      break;
    case FL_Down:
    case FL_Left:
      left_cb();
      break;
  }
  return e;
}

void UserInterface::zoom(bool out) {
  if(CURRENT_FILE.compare("")==0)
    return;
  int w = viewer->w();
  int h = viewer->h();
  int scaleW = w * 0.10;
  int scaleH = h * 0.10;
  if(out)
  {
    w = w - scaleW;
    h = h - scaleH; 
  }
  else
  {
    w = w + scaleW;
    h = h + scaleH;
  }
  viewer->size(w,h);
  resizeImage(viewer);
}

void UserInterface::dnd_file(std::string file) {
  std::string fname = file;
  char * tmp = const_cast<char*>(fname.c_str());
  fl_decode_uri(tmp);
  fname = tmp;
  unsigned int URI  = fname.find("file:///");
  if(URI==0)
  {
    fname = fname.substr(URI+7,std::string::npos);
  }
  view_image(fname);
}

int main(int argc, char *argv[]) {
  Fl::visual(FL_RGB);
  UserInterface* ui = new UserInterface;
  try
  {
    ui->make_window()->show();
    if (argc > 1)
    {
      char* charchar1 = argv[1];
      fl_decode_uri(charchar1);
      trace(charchar1);
      std::string fname = charchar1;
      unsigned int URI  = fname.find("file:///");
      if(URI==0)
      {
        fname = fname.substr(URI+7,std::string::npos);
      }
      ui->view_image(fname);
    }
  
    return Fl::run();
  }
  catch (const std::exception& e){
    std::cerr << "Unhandled exception:\n" << e.what() << std::endl;
    return EXIT_FAILURE;
  }
  catch (...){
    std::cerr << "Unknown exception!" << std::endl;
    return EXIT_FAILURE;
  }
}

void trace(std::string msg) {
  std::cout<<msg<<std::endl;
}
