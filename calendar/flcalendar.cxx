// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include <libintl.h>
#include "flcalendar.h"

void UI::cb_OK_i(Fl_Button*, void*) {
  std::cout<< cal->get_date_string() << std::endl;
exit(0);
}
void UI::cb_OK(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void UI::cb__i(Fl_Button*, void*) {
  settings_window()->show();
}
void UI::cb_(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb__i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_settings[] = {
"16 16 2 1",
" \tc None",
".\tc #000000",
"      ....      ",
"   .  ....  .   ",
"  ... .... ...  ",
" .............. ",
"  ............  ",
"   ....  ....   ",
"......    ......",
".....      .....",
".....      .....",
"......    ......",
"   ....  ....   ",
"  ............  ",
" .............  ",
"  ... .... ...  ",
"   .  ....  .   ",
"      ....      "
};
static Fl_Image *image_settings() {
  static Fl_Image *image = new Fl_Pixmap(idata_settings);
  return image;
}

void UI::cb_Background_i(Fl_Button* o, void*) {
  cal->bg_color(choose_a_color(o));
cal->update();
}
void UI::cb_Background(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Background_i(o,v);
}

void UI::cb_Highlight_i(Fl_Button* o, void*) {
  cal->bg_color_2(choose_a_color(o));
cal->update();
}
void UI::cb_Highlight(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Highlight_i(o,v);
}

void UI::cb_Label_i(Fl_Button* o, void*) {
  cal->label_color(choose_a_color(o));
cal->update();
}
void UI::cb_Label(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Label_i(o,v);
}

void UI::cb_ls_slide_i(Fl_Slider* o, void*) {
  ls_out->value(o->value());
cal->label_size(o->value());
cal->update();
}
void UI::cb_ls_slide(Fl_Slider* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_ls_slide_i(o,v);
}

void UI::cb_ls_out_i(Fl_Value_Input* o, void*) {
  ls_slide->value(o->value());
cal->label_size(o->value());
cal->update();
}
void UI::cb_ls_out(Fl_Value_Input* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_ls_out_i(o,v);
}

void UI::cb_SAVE_i(Fl_Button* o, void*) {
  save_pref();
o->parent()->hide();
}
void UI::cb_SAVE(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_SAVE_i(o,v);
}

Fl_Double_Window* UI::date_window() {
  { Fl_Double_Window* o = date_win = new Fl_Double_Window(276, 255, gettext("Calendar"));
    date_win->user_data((void*)(this));
    { cal = new Fl_Calendar(10, 7, 256, 208);
      cal->box(FL_NO_BOX);
      cal->color((Fl_Color)55);
      cal->selection_color(FL_BACKGROUND_COLOR);
      cal->labeltype(FL_NORMAL_LABEL);
      cal->labelfont(0);
      cal->labelsize(14);
      cal->labelcolor(FL_FOREGROUND_COLOR);
      cal->align(Fl_Align(FL_ALIGN_TOP));
      cal->when(FL_WHEN_RELEASE);
      cal->end();
    } // Fl_Calendar* cal
    { Fl_Button* o = new Fl_Button(220, 225, 45, 25, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)62);
      o->selection_color((Fl_Color)61);
      o->labelfont(1);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(175, 225, 35, 25);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color((Fl_Color)22);
      o->image( image_settings() );
      o->callback((Fl_Callback*)cb_);
      get_pref();
    } // Fl_Button* o
    under_mouse(o);
    date_win->end();
  } // Fl_Double_Window* date_win
  return date_win;
}

Fl_Double_Window* UI::settings_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(230, 215, gettext("Settings"));
    w = o; if (w) {/* empty */}
    o->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(160, 25, 60, 30, gettext("Background"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Background);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->color(cal->bg_color());
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(160, 65, 60, 30, gettext("Highlight"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Highlight);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->color(cal->bg_color_2());
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(160, 105, 60, 30, gettext("Label"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Label);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      o->color(cal->label_color());
    } // Fl_Button* o
    { Fl_Slider* o = ls_slide = new Fl_Slider(95, 145, 85, 30, gettext("Label Size"));
      ls_slide->type(1);
      ls_slide->box(FL_GTK_DOWN_BOX);
      ls_slide->color((Fl_Color)38);
      ls_slide->minimum(1);
      ls_slide->maximum(60);
      ls_slide->step(1);
      ls_slide->callback((Fl_Callback*)cb_ls_slide);
      ls_slide->align(Fl_Align(FL_ALIGN_LEFT));
      o->value(cal->label_size());
    } // Fl_Slider* ls_slide
    { Fl_Value_Input* o = ls_out = new Fl_Value_Input(185, 145, 35, 30);
      ls_out->box(FL_FLAT_BOX);
      ls_out->selection_color((Fl_Color)80);
      ls_out->callback((Fl_Callback*)cb_ls_out);
      o->value(cal->label_size());
    } // Fl_Value_Input* ls_out
    { Fl_Button* o = new Fl_Button(155, 185, 66, 25, gettext("SAVE"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)62);
      o->selection_color((Fl_Color)61);
      o->labelfont(1);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_SAVE);
    } // Fl_Button* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void UI::get_pref() {
  Fl_Preferences prefs( Fl_Preferences::USER, "flcalendar", "torios" );
  Fl_Preferences settings(prefs, "Settings");
  
  int bg, bg2, label, label_size;
  
  settings.get("bg",         bg,         cal->bg_color());
  settings.get("bg2",        bg2,        cal->bg_color_2());
  settings.get("label",      label,      cal->label_color());
  settings.get("label_size", label_size, cal->label_size());
  //settings.get("box",        box,        cal->box_type());
  cal->bg_color(bg);
  cal->bg_color_2(bg2);
  cal->label_color(label);
  cal->label_size(label_size);
  cal->update();
}

void UI::save_pref() {
  Fl_Preferences prefs( Fl_Preferences::USER, "flcalendar", "torios" );
  Fl_Preferences settings(prefs, "Settings");
  
  settings.set("bg",         cal->bg_color());
  settings.set("bg2",        cal->bg_color_2());
  settings.set("label",      cal->label_color());
  settings.set("label_size", cal->label_size());
  //settings.set("box",        cal->box_type());
}

int main(int argc, char **argv) {
  UI* ui = new UI();
  
  try
  {
    if (argc > 1)
    {
      for (int i=1; i<argc; i++)
      {
        std::string arg = argv[i];
      }
    }
    ui->date_window()->show();
    return Fl::run();
  }
  catch (const std::exception& e)
  {
    std::cerr << "Unhandled exception:\\n" << e.what() << std::endl;
    return EXIT_FAILURE;
  }
  catch (...)
  {
    std::cerr << "Unknown exception!" << std::endl;
    return EXIT_FAILURE;
  }
  return Fl::run();
}
