// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include <libintl.h>
#include "flscreenie.h"

void UI::cb_Full_i(Fl_Button*, void*) {
  screener_win->hide();
full_screen();
}
void UI::cb_Full(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Full_i(o,v);
}

void UI::cb_Quit_i(Fl_Button*, void*) {
  exit(0);
}
void UI::cb_Quit(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void UI::cb_Area_i(Fl_Button*, void*) {
  screener_win->hide();
sizer_window()->show();
}
void UI::cb_Area(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Area_i(o,v);
}

void UI::cb_Take_i(Fl_Button*, void*) {
  s_win->hide();
screenshot(s_win->w(),s_win->h(),s_win->x(),s_win->y(),false);
}
void UI::cb_Take(Fl_Button* o, void* v) {
  ((UI*)(o->parent()->user_data()))->cb_Take_i(o,v);
}

Fl_Double_Window* UI::make_window() {
  { screener_win = new Fl_Double_Window(170, 80, gettext("Screenie"));
    screener_win->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(5, 40, 90, 35, gettext("Full Screen"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color(FL_DARK_GREEN);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Full);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(100, 40, 65, 35, gettext("Quit"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color(FL_DARK_RED);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    { new Fl_Box(5, 5, 155, 35, gettext("Take a Screen shot"));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(5, 80, 90, 35, gettext("Area"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color(FL_DARK_GREEN);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Area);
      o->deactivate();
    } // Fl_Button* o
    screener_win->end();
  } // Fl_Double_Window* screener_win
  return screener_win;
}

void UI::full_screen() {
  screenshot(Fl::w(),Fl::h());
}

void UI::screenshot(int w, int h,int x,int y, bool FULL ) {
  Screenie *S = new Screenie(w,h,0,x,y);
  S->box(FL_NO_BOX);
  if(FULL)
    S->fullscreen();
  S->border(0);
  S->show();
}

Fl_Double_Window* UI::sizer_window() {
  { s_win = new Fl_Double_Window(255, 185);
    s_win->color((Fl_Color)55);
    s_win->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(55, 75, 145, 40, gettext("Take Screen Shot"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)62);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Take);
    } // Fl_Button* o
    s_win->end();
    s_win->resizable(s_win);
  } // Fl_Double_Window* s_win
  return s_win;
}

int main(int argc, char*argv[]) {
  UI *ui = new UI();
  ui->make_window()->show();
  return Fl::run();
}

void trace(std::string msg) {
  std::cout<<msg<<std::endl;
}

void Screenie::cb_saver_i(Fl_Button*, void*) {
  save_file();
}
void Screenie::cb_saver(Fl_Button* o, void* v) {
  ((Screenie*)(o->parent()->user_data()))->cb_saver_i(o,v);
}

void Screenie::cb_Quit1_i(Fl_Button*, void*) {
  exit(0);
}
void Screenie::cb_Quit1(Fl_Button* o, void* v) {
  ((Screenie*)(o->parent()->user_data()))->cb_Quit1_i(o,v);
}

Screenie::Screenie(int w, int h, const char* l ,int x, int y):Fl_Window(w,h,l) {
  X=x;
  Y=y;
}

void Screenie::draw() {
  Fl_Window::draw();
  uchar *p = fl_read_image(0,X,Y,w(),h());
  if(p)
  {
    save_image(p,w(),h());
    delete[]p;
  }
  hide();
}

void Screenie::save_image(uchar *p,int w, int h) {
  const char* fileName="/tmp/screenie.png";
  save_png(fileName,p,w,h);
  preview_image()->show();
  previewer->size(w,h);
  Fl_Image* image = new Fl_PNG_Image(fileName);
  previewer->image(image->copy());
  previewer->show();
}

void Screenie::save_file() {
  const char* fileName="/tmp/screenie.png";
  const char* home=getenv("HOME");
  if(home==NULL)
    home="/tmp";
  char *newfile = fl_file_chooser("Save File?", "*", home);
  if (newfile != NULL)
  {
    std::ifstream source(fileName, std::ios::binary);
    std::ofstream dest(newfile, std::ios::binary);
    dest << source.rdbuf();
    source.close();
    dest.close();
  }
  exit(0);
}

Fl_Double_Window* Screenie::preview_image() {
  { previewer_win = new Fl_Double_Window(445, 390, gettext("Preview"));
    previewer_win->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(-10, -15, 455, 350);
      { previewer = new Fl_Box(5, 5, 440, 330);
        previewer->box(FL_FLAT_BOX);
        previewer->color((Fl_Color)23);
        Fl_Group::current()->resizable(previewer);
      } // Fl_Box* previewer
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Scroll* o
    { saver = new Fl_Button(290, 340, 70, 35, gettext("Save"));
      saver->box(FL_FLAT_BOX);
      saver->color((Fl_Color)61);
      saver->selection_color(FL_DARK_GREEN);
      saver->labelcolor(FL_BACKGROUND2_COLOR);
      saver->callback((Fl_Callback*)cb_saver);
    } // Fl_Button* saver
    { Fl_Button* o = new Fl_Button(370, 340, 70, 35, gettext("Quit"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color(FL_DARK_RED);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Quit1);
    } // Fl_Button* o
    previewer_win->end();
  } // Fl_Double_Window* previewer_win
  return previewer_win;
}

int Screenie::save_png(const char *file,unsigned char* p,int w,int h) {
  /*
  Taken from stack overflow
  https://stackoverflow.com/questions/46596654/fltk-desktop-screenshot-issue
  */
  FILE *fp;
  fp = fl_fopen(file, "wb");
  if (fp == NULL)
    return 1;
  png_structp png = png_create_write_struct(PNG_LIBPNG_VER_STRING, 0, 0, 0);
  if (png == NULL)
  {
    fclose (fp);
    return 2;
  }
  png_infop info = png_create_info_struct(png);
  png_bytep ptr = (png_bytep)p;
  png_init_io(png, fp);
  png_set_IHDR(png, info, w, h, 8, PNG_COLOR_TYPE_RGB, PNG_INTERLACE_NONE,
  PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);
  png_write_info(png, info);
  for (int i = h; i>0; i--, ptr += w * 3)
  {
    png_write_row(png,ptr);
  }
  png_write_end(png,info);
  png_destroy_write_struct(&png, &info);
  fclose(fp);
  return 0;
}
