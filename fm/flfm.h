// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef flfm_h
#define flfm_h
#include <FL/Fl.H>
#include <cstdarg>
//#include <magic.h>
#include <X11/Xlib.h>
#include <FL/Fl_Menu_Window.H>
#include <FL/filename.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_JPEG_Image.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_XBM_Image.H>
#include <FL/Fl_XPM_Image.H>
#include <FL/Fl_GIF_Image.H>
#include <stdexcept>
#include <errno.h>

#include <string>
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>
#include <algorithm>


#include <sys/stat.h>
#include <sys/types.h>
#include <sys/sendfile.h>  // sendfile

#include <fcntl.h>
#include <float.h>

#include <dirent.h>
#include <pwd.h>
#include <time.h>
#include <grp.h>
#include <langinfo.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <cstdlib>
#include <locale.h>
#include <unistd.h>
#include <signal.h>
#include <string>
#include <vector>
int TYPE; 
unsigned int BACKGROUND_COLOR; 
unsigned int FOREGROUND_COLOR; 
extern std::vector<std::string> m_themesVector; 
extern std::vector<std::string> m_ICON_PATHS; 

class Icon : public Fl_Button {
public:
  std::string default_folder; 
private:
  std::string OLD_ICON; 
public:
  void changeWidgetIcon(std::string icon_file, bool save=true);
  Icon(std::string icon_file,int X,int Y,int W,int H,const char *l=0);
  std::vector<std::string> comma_vector(std::string LINE,std::vector<std::string> Vector);
  std::string convert_num_to_string(int num);
  unsigned int convert_string_to_number(std::string num);
  std::string current_path(int whichPath);
  std::vector<std::string> delimiter_vector_from_string(std::string string_to_become_vector,std::string delimiter);
  std::vector<std::string> desktop_dirs();
  std::string file_to_string(std::string filename);
  std::string find_xdg_data_dir_subdir(std::string subdir);
  std::string get_directory_from_filename(std::string filename);
  std::string get_equal_value(std::string INTERNAL_LINE);
  std::vector<std::string> get_file_vector(std::string DIRECTORY,std::string file);
  std::string get_gtk_icon_theme();
  std::string get_line_with_delim(std::string filename, std::string line,std::string delim);
  std::string get_line_with_equal(std::string filename, std::string line);
  std::string get_shell_for_C();
  std::string get_symlinkpath(std::string symlink);
  bool has_file_extention_at_end(std::string filename,std::string extention);
  unsigned int items_in_path();
  std::vector<std::string> IconPaths(int size_to_use=32);
  std::vector<std::string> IconPathsForTheme(std::string theme,int size_to_use=32);
  std::vector<std::string> icon_themefiles_vector();
  std::vector<std::string> join_string_vectors(std::vector<std::string> vectorA,std::vector<std::string> vectorB);
  std::vector<std::string> list_icon_dirs_in_themefile(std::string themefile,int size_to_use);
  std::string look_for_icon_file(std::string fileWITHOUTpath);
  std::string look_for_file_in_subdirs(std::string fileWITHOUTpath,std::string dir);
  std::string look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir);
  bool look_for_string_in_vector(std::vector<std::string> vector_to_check,std::string item_to_find);
  std::string remove_cruft(std::string StringInput, std::string CruftToRemove);
  std::vector<std::string> sort_array(std::vector<std::string> vector_to_sort);
  bool test_dir(std::string dirToTest);
  bool test_exec(std::string execToTest);
  bool test_file(std::string fileWithFullPATH);
  std::string test_file_in_vector_path(std::string fileWithNOPATH,std::vector<std::string> directories_to_check);
  std::string term_out(std::string terminal_Command_You_Want_Output_From);
  std::string sed_i(std::string input, std::string remove, std::string replace);
};

class Item : public Icon {
public:
  std::string Filename; 
  void (*Picker)(Fl_Widget*); 
  void (*Menu)(Fl_Widget*); 
  Item(std::string filename, int X=5, int Y=5, int W=80, int H=80, const char *L=0,std::string icon="") ;
  int handle(int e);
  void open();
private:
  struct stat statbuf;
  struct passwd *pwd;
  struct tm *tm;
public:
  std::string properties(int type);
  std::string get_mod_time();
};

class Grid : public Fl_Scroll {
public:
  std::string Directory; 
private:
  int _x; 
  int _y; 
  int _w; 
  std::string default_folder; 
  int _h; 
public:
  Grid(std::string directory, int X=165, int Y=95, int W=375, int H=350) ;
  void populate();
  void load(std::string directory);
  void open();
};

class File_List_Browser : public Fl_File_Browser {
public:
  void (*Picker)(Fl_Widget*); 
  int handle(int e);
  File_List_Browser(int X, int Y, int W, int H, const char *L=0) ;
  void open();
};

class Tab : public Fl_Group {
public:
  Fl_Browser* Places; 
  Fl_Browser* Bookmarks; 
  std::vector <std::string> HISTORY; 
  std::vector <std::string> BOOKMARKS; 
  std::vector <std::string> PLACES; 
  std::vector <std::string> PLACES_LIST; 
  std::string CurrentDirectory; 
  std::string XDG_CONFIG_HOME; 
  std::string HOME; 
  File_List_Browser* FileBrowser; 
  Grid* FileGrid; 
  Tab(std::string directory="", void *v=NULL, int X=0, int Y=80, int W=540, int H=370,const char *l="") ;
  void add_place(std::string Name, std::string URI,int iter);
  void change_type();
  void back();
  void bookmark_icon(int line,std::string LINE);
  void browser_icon(int line,std::string LINE, Fl_Browser* o);
  void change_dir(std::string dir);
  static void b_cb(Fl_Widget * o, void* v);
  static void f_cb(Fl_Widget * o);
  void home();
  bool line_contains(std::string line, std::string item);
  void line_icon(Fl_Browser* o, std::string icon);
  void make_bookmarks();
  void make_places();
  static void p_cb(Fl_Widget * o, void* v);
  void pick_bookmark();
  void pick_place();
  void pick_selected();
  void up();
  int change_mode(std::string file, mode_t mode);
};
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>

class UserInterface {
public:
  std::vector <std::string> PLACES_LIST; 
  std::string CURRENT_DIR; 
protected:
  std::string CURRENT_FILE; 
public:
  UserInterface();
  Fl_Double_Window* about_window();
  Fl_Double_Window *about_win;
private:
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  void about_text(Fl_Widget* o);
  void add_tab(std::string dir="");
  void button_style(int style=0);
  void change_dir(std::string dir);
  void changeWidgetImage(std::string icon_file, Fl_Widget * widget);
  std::vector<std::string> comma_vector(std::string LINE,std::vector<std::string> Vector);
  std::string convert_num_to_string(int num);
  unsigned int convert_string_to_number(std::string num);
  std::string current_path(int whichPath);
  std::vector<std::string> delimiter_vector_from_string(std::string string_to_become_vector,std::string delimiter);
  std::vector<std::string> desktop_dirs();
  void display_text(std::string text, Fl_Widget *o);
  std::string file_to_string(std::string filename);
  std::string find_xdg_data_dir_subdir(std::string subdir);
  std::string get_equal_value(std::string INTERNAL_LINE);
  std::vector<std::string> get_file_vector(std::string DIRECTORY,std::string file);
  unsigned int get_fl_color(XColor *c);
  std::string get_line_with_delim(std::string filename, std::string line,std::string delim);
  std::string get_line_with_equal(std::string filename, std::string line);
  int getProcIdByName(std::string procName);
  std::string get_shell_for_C();
  std::string get_symlinkpath(std::string symlink);
  unsigned int items_in_path();
  std::vector<std::string> join_string_vectors(std::vector<std::string> vectorA,std::vector<std::string> vectorB);
  void load_file(std::string filename, Fl_Widget *o);
  std::string look_for_file_in_subdirs(std::string fileWITHOUTpath,std::string dir);
  std::string look_for_first_file_in_subdirs(std::string fileWITHOUTpath,std::string dir);
  bool look_for_string_in_vector(std::vector<std::string> vector_to_check,std::string item_to_find);
  void make_icon(Fl_Window *o);
  Fl_Double_Window* make_window();
  Fl_Double_Window *win;
  Fl_Menu_Bar *menu;
  static Fl_Menu_Item menu_menu[];
private:
  inline void cb_Exit_i(Fl_Menu_*, void*);
  static void cb_Exit(Fl_Menu_*, void*);
  inline void cb_Preferences_i(Fl_Menu_*, void*);
  static void cb_Preferences(Fl_Menu_*, void*);
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  Fl_Button *tab_button;
private:
  inline void cb_tab_button_i(Fl_Button*, void*);
  static void cb_tab_button(Fl_Button*, void*);
public:
  Fl_Button *home_button;
private:
  inline void cb_home_button_i(Fl_Button*, void*);
  static void cb_home_button(Fl_Button*, void*);
public:
  Fl_Button *previous_button;
private:
  inline void cb_previous_button_i(Fl_Button*, void*);
  static void cb_previous_button(Fl_Button*, void*);
public:
  Fl_Button *up_button;
private:
  inline void cb_up_button_i(Fl_Button*, void*);
  static void cb_up_button(Fl_Button*, void*);
public:
  Fl_Input *barinput;
private:
  inline void cb_barinput_i(Fl_Input*, void*);
  static void cb_barinput(Fl_Input*, void*);
public:
  Fl_Tabs *TABS;
private:
  inline void cb_TABS_i(Fl_Tabs*, void*);
  static void cb_TABS(Fl_Tabs*, void*);
public:
  bool program_is_running(std::string program_line);
  std::string remove_cruft(std::string StringInput, std::string CruftToRemove);
  int run_a_program_in_background(std::string program);
  int run(std::string program);
  static void* run_in_bg(void *userdata);
  std::string sed_i(std::string input, std::string remove, std::string replace);
  std::vector<std::string> sort_array(std::vector<std::string> vector_to_sort);
  bool test_exec(std::string execToTest);
  std::string test_file_in_vector_path(std::string fileWithNOPATH,std::vector<std::string> directories_to_check);
  std::string term_out(std::string terminal_Command_You_Want_Output_From);
  static void open_cb(Fl_Widget *o, void *);
  void update(Fl_Input *o);
  bool test_dir(std::string dirToTest);
  void open_in_terminal();
  Fl_Double_Window* pref_window();
  Fl_Check_Button *handle_desktop;
private:
  inline void cb_handle_desktop_i(Fl_Check_Button*, void*);
  static void cb_handle_desktop(Fl_Check_Button*, void*);
public:
  Fl_Button *desktop_image;
  Fl_Button *desktop_color;
  Fl_Check_Button *desktop_icons;
  void make_popup(Fl_Widget *o);
  static void handle_menu(Fl_Widget *w, void *v);
};

class Desktop {
protected:
  std::string Background; 
  int Type; 
public:
  Desktop(std::string BG, int type);
  Fl_Double_Window* make_desktop();
  Fl_Double_Window *DESKTOP;
  void configure();
  void set_background(std::string icon_file, int type);
};
int main(int argc, char *argv[]);
void trace(std::string msg);
bool extension(std::string ext,...);
std::string get_directory_from_filename(std::string input);
bool has_file_extention_at_end(std::string filename,std::string extention);
bool test_file(std::string fileWithFullPATH);
void theme_scrollbars(Fl_Browser* o);
void theme_scrollbars(Fl_Scroll* o);
void process_errno();
#endif
