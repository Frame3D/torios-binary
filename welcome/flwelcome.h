// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef flwelcome_h
#define flwelcome_h
#include <FL/Fl.H>
#include <FL/Fl_Text_Buffer.H>
#include <FL/Fl_Text_Display.H>
#include <FL/fl_ask.H>
#include <FL/filename.H>
#include <FL/Fl_Browser.H>
#include <string>
#include <iostream>
#include <sys/stat.h>
#include <sys/types.h>
#include <algorithm>
#include <dirent.h> //dir
#include <fstream> //ifstream
#include <fcntl.h> //readlink
#include <unistd.h> //readlink
#include <vector>

class Terminal : public Fl_Text_Display {
public:
  Fl_Text_Buffer *terminalbuffer; 
  Terminal(int X,int Y,int W,int H,const char* L=0) ;
  void append(char* p);
  int terminal_output(std::string terminal_Command_You_Want_Output_From);
};
Terminal *terminal; 
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Text_Display.H>

class UI {
  int DIST; 
public:
  std::string current_path(int whichPath);
  std::string file_to_string(std::string filename);
  std::string get_directory_from_filename(std::string filename);
  std::string get_shell_for_C();
  std::string get_symlinkpath(std::string symlink);
  void install(std::string pkg);
  void info(std::string pkg);
  Fl_Double_Window* install_list_window();
  Fl_Double_Window *install_win;
  Fl_Browser *install_list;
private:
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
  inline void cb_Install_i(Fl_Button*, void*);
  static void cb_Install(Fl_Button*, void*);
  inline void cb_Information_i(Fl_Button*, void*);
  static void cb_Information(Fl_Button*, void*);
public:
  unsigned int items_in_path();
  Fl_Double_Window* make_window();
  Fl_Double_Window *about;
private:
  inline void cb_Exit_i(Fl_Button*, void*);
  static void cb_Exit(Fl_Button*, void*);
  inline void cb_Web_i(Fl_Button*, void*);
  static void cb_Web(Fl_Button*, void*);
  inline void cb_Office_i(Fl_Button*, void*);
  static void cb_Office(Fl_Button*, void*);
  inline void cb_Music_i(Fl_Button*, void*);
  static void cb_Music(Fl_Button*, void*);
  inline void cb_Video_i(Fl_Button*, void*);
  static void cb_Video(Fl_Button*, void*);
  inline void cb_Media_i(Fl_Button*, void*);
  static void cb_Media(Fl_Button*, void*);
  inline void cb_Games_i(Fl_Button*, void*);
  static void cb_Games(Fl_Button*, void*);
  inline void cb_System_i(Fl_Button*, void*);
  static void cb_System(Fl_Button*, void*);
  inline void cb_Bootloader_i(Fl_Button*, void*);
  static void cb_Bootloader(Fl_Button*, void*);
  inline void cb_Appearance_i(Fl_Button*, void*);
  static void cb_Appearance(Fl_Button*, void*);
  inline void cb_Login_i(Fl_Button*, void*);
  static void cb_Login(Fl_Button*, void*);
  inline void cb_ToriOS_i(Fl_Button*, void*);
  static void cb_ToriOS(Fl_Button*, void*);
  inline void cb_ToriOS1_i(Fl_Button*, void*);
  static void cb_ToriOS1(Fl_Button*, void*);
  inline void cb_ToriOS2_i(Fl_Button*, void*);
  static void cb_ToriOS2(Fl_Button*, void*);
public:
  void populateBrowserWithString(Fl_Browser *o, std::string STRING);
  int run(std::string program);
  bool test_exec(std::string execToTest);
  bool test_file(std::string fileWithFullPATH);
  std::string toriosversion();
  void make_install_list(std::string LIST);
  bool isDebian();
  void open_website(std::string site);
  Fl_Double_Window* info_window(std::string MSG);
  Fl_Text_Display *text_info;
private:
  inline void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_Double_Window* make_terminal();
  Fl_Double_Window *term_win;
private:
  inline void cb_Close2_i(Fl_Button*, void*);
  static void cb_Close2(Fl_Button*, void*);
public:
  std::string term_out(std::string terminal_Command_You_Want_Output_From);
  void show_command(std::string command);
};
int main(int argc, char*argv[]);
void trace(std::string msg);
#endif
