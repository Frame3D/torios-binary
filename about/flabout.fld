# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {\#include <string>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include <sys/stat.h>
\#include <sys/types.h>
\#include <algorithm>
\#include <dirent.h> //dir
\#include <fstream> //ifstream
\#include <fcntl.h> //readlink
\#include <unistd.h> //readlink} {public global
} 

decl {\#include <vector>} {public global
} 

class UI {open
} {
  decl {std::string MSG;} {public local
  }
  Function {combine(std::vector<std::string> in)} {return_type {std::string}
  } {
    code {std::string out;
if(in.empty())
{
  out="";
}
else
{
  for( std::vector<std::string>::iterator it = in.begin();
    it!=in.end();
    ++it)
  {
    out+=*it;
    out+=" ";
  }
}
return out;} {}
  }
  Function {file_to_string(std::string filename)} {open return_type {std::string}
  } {
    code {if(filename.compare("")==0){return "";}
/** make sure it is actually a file */
if(!test_file(filename))
{
  return "";
  trace("No file sent in: "+filename);
}
std::string thisLine;
std::string fullString;
std::ifstream inputFileStream(filename.c_str(), std::ifstream::in);
if(inputFileStream.is_open())
{
  while (getline(inputFileStream,thisLine))
  {
    if(fullString.compare("")==0){fullString=thisLine;}
    else{fullString=fullString+"\\n"+thisLine;}
  }
}
return fullString;} {}
  }
  Function {get_directory_from_filename(std::string filename)} {open return_type {std::string}
  } {
    code {unsigned int finder=filename.rfind("/");
if(finder<filename.length())
{
  filename=filename.erase(finder,std::string::npos);
}
else{return "";} /**return empty if there is no directory*/
return filename;} {}
  }
  Function {get_symlinkpath(std::string symlink)} {open return_type {std::string}
  } {
    code {struct stat statinfo;
if((lstat(symlink.c_str(), &statinfo)>0)){return symlink;}
if ((!S_ISLNK (statinfo.st_mode) && statinfo.st_nlink > 1)||(S_ISLNK (statinfo.st_mode)))
{
  std::vector<char> buf(400);
  size_t len;
  do
  {
    buf.resize(buf.size() + 100);
    len = ::readlink(symlink.c_str(), &(buf[0]), buf.size());
  }
  while(buf.size() == len);
  if (len > 0)
  {
    buf[len] = '\\0';
    return (std::string(&(buf[0])));
  }
}
else
{
  return symlink;
}
return symlink;} {}
  }
  Function {make_text()} {open
  } {
    code {if(MSG.compare("")!=0)
{
  populateBrowserWithString(text,MSG);
  return;
}
std::string FALL_BACK_TEXT="/usr/share/torios/about_us.plain";
std::string TEXT="ToriOS version "+toriosversion();

TEXT+="\\nYes, we are a family\\n\\
Ali Jawad\\tThe founder and project lead\\n\\
Israel Dahl\\tLead developer\\n\\
Nio Wiklund\\tDeveloper, QA testing\\n\\
Paul\\tDocumentation\\n\\
Geoffrey\\tDocumentation\\n\\
Sam Klein\\tDocumentation\\n\\
JackT\\tQA testing\\n\\
Rafael\\tArtwork & Web Design\\n\\
Kris\\tWeb hosting\\n\\
Phill\\tWeb hosting, technical support, & Hosting the ISO";
if(test_file(FALL_BACK_TEXT))
{
  TEXT=file_to_string(FALL_BACK_TEXT);
}
populateBrowserWithString(text,TEXT);} {}
  }
  Function {make_window()} {} {
    Fl_Window about {
      label About open
      xywh {272 279 310 330} type Double hide
    } {
      Fl_Button ok {
        label Ok
        callback {exit(0);}
        xywh {215 290 90 35} box FLAT_BOX color 60 selection_color 72 labelcolor 7
      }
      Fl_Browser text {
        xywh {5 5 305 275} box FLAT_BOX selection_color 80
        code0 {make_text();}
      }
    }
  }
  Function {populateBrowserWithString(Fl_Browser *o, std::string STRING)} {open
  } {
    code {if(STRING.compare("")==0)return;
std::string sep="\\n";
unsigned int finder=STRING.find(sep);
unsigned int length=STRING.length();
/** If no '\\n' is found just add the string and return*/
if(finder>length){
  //("No Newline found");
  o->add(STRING.c_str());
  return;
}
/** while there is a new line keep adding*/
while(finder<length){
  finder=STRING.find(sep);
  length=STRING.length();
  std::string tmp1=STRING;
  /** make sure if no newline is at the end it wont crash*/
  if(finder<length+1){
  std::string tmp2=tmp1.erase(finder,std::string::npos);
  o->add(tmp2.c_str());
  tmp1=STRING;
  finder=tmp1.find(sep);
  STRING=tmp1.substr(finder+1,std::string::npos);
  }
}} {}
  }
  Function {test_file(std::string fileWithFullPATH)} {open return_type bool
  } {
    code {if(fileWithFullPATH.compare("")==0){return false;}
std::string dir=get_directory_from_filename(fileWithFullPATH);
if(dir.compare("")==0){return false;}
DIR *mydir=NULL;
struct dirent *entryPointer=NULL;
mydir=opendir(dir.c_str());
if(mydir!=NULL)
{
  while ((entryPointer=readdir(mydir))!=NULL)
  {
    if(entryPointer->d_type == DT_REG)
    {
      std::string fullpath=entryPointer->d_name;
      if(dir.rfind('/')!=dir.length()-1){dir+="/";}
      fullpath=dir+fullpath;
      if(fullpath.compare(fileWithFullPATH)==0)
      {
        closedir(mydir);
        return true;
      }
    }
  }
  closedir(mydir);
}
else{trace("could not open directory to search for "+fileWithFullPATH);}
return false;} {}
  }
  Function {toriosversion()} {return_type {std::string}
  } {
    code {return file_to_string("/usr/share/torios/version");} {}
  }
} 

Function {main(int argc, char*argv[])} {open return_type int
} {
  code {std::string current_exec_name = argv[0];
std::string first_arge;
std::vector<std::string> all_args;
if (argc > 1)
{
  first_arge = argv[1];
  all_args.assign(argv + 1, argv + argc);
}
UI *ui = new UI();
ui->MSG=ui->combine(all_args);
ui->make_window()->show();
return Fl::run();} {}
} 

Function {trace(std::string msg)} {open
} {
  code {//std::cout<<msg<<std::endl;} {selected
  }
} 
